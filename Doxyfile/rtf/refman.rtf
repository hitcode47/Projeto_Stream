{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment Projeto_Pancadao  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
1.0 \par
}}Projeto_Pancadao}
{\comment Gerado por doxygen 1.9.7.}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt Projeto_Pancadao}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Vers\'E3o 1.0\par\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Sum\'E1rio\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\par \pard\plain 
\par \pard\plain 
\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Projeto_Stream\par \pard\plain 
{\tc\tcl1 \v Projeto_Stream}
{\xe \v Projeto_Stream}
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Projeto final relacionado \'E0 disciplina de Programa\'E7\'E3o de Desenvolvimento de Software(PDS)II.\par
Colaboradores:{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Bruno Dos Santos Lopes: Respons\'E1vel pela introdu\'E7\'E3o do m\'E9todo m\'FAsica e reprodu\'E7\'E3o;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Nicolas Silva de Paula Gon\'E7alves: Respons\'E1vel pela introdu\'E7\'E3o do m\'E9todo pesquisa;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Diego Felipe Machado Silva: Respons\'E1vel pela introdu\'E7\'E3o do m\'E9todo feedback;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Breno Ribeiro Rodrigues: Respons\'E1vel pela documenta\'E7\'E3o e solu\'E7\'E3o de bugs;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Dantom Dimitri Guedes: Respons\'E1vel pela introdu\'E7\'E3o do m\'E9todo cadastro.\par}
\par
Documenta\'E7\'E3o Aplicativo Pancad\'E3o:\par
{\i OBSERVA\'C7\'D5ES} \par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Ao rodar o programa, recomenda-se fechar todas as guias consideradas importantes do seu navegador. Tal erro \'E9 facilmente solucionado, por\'E9m, por conta de um calend\'E1rio curto, o grupo optou por n\'E3o modificar o programa;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Um documento teste foi implementado no programa, por\'E9m n\'E3o foi poss\'EDvel concili\'E1-lo ao c\'F3digo. Embora a constru\'E7\'E3o l\'F3gica esteja conforme o esperado, uma grande dificuldade de implementa\'E7\'E3o foi encontrado. Recomenda-se rodar o programa desconsiderando o DocTest e analisar somente a l\'F3gica formulada;\par}
\par
A m\'FAsica \'E9 uma das principais ferramentas de express\'E3o que est\'E1 presente na vida de muitas pessoas. Nessse sentido, o grupo empenhou-se em desenvolver um aplicativo de m\'FAsica chamado "Pancad\'E3o". Dessa forma, buscamos construir um programa simples com uma interface intuitiva e sugestiva para qualquer tipo de usu\'E1rio. Assim, o aplicativo permite que o usu\'E1rio crie sua conta e, a partir disso, crie playlists, reaja por meio de "likes" ou "deslikes" em uma m\'FAsica, fa\'E7a coment\'E1rios e at\'E9 mesmo usufrua de um pesquisador inte- ligente, o qual dar\'E1 recomenda\'E7\'F5es de can\'E7\'F5es a partir da semelhan\'E7a sint\'E1tica das palavras de entrada. Ademais, fun\'E7\'F5es b\'E1sicas como pular, retroceder e pausar uma m\'FAsica tamb\'E9m est\'E3o presentes. Por fim, o usu\'E1rio ter\'E1 a escolha de fazer login, trocar o nome de usu\'E1rio, deletar uma conta existente e encerrar o aplicativo ao fim do seu uso.\par
Inicialmente, o grupo dedicou-se em criar as fun\'E7\'F5es de cadastro e login do usu\'E1rio. Assim, tal sistema apresentou diversas dificuldades durante sua implementa\'E7\'E3o. Optou-se, primeiramente, por utilizar "arquivos" como banco de dados devido \'E0 sua capacidade de manter os dados salvos mesmo ap\'F3s o encerramento do programa e desligamento do computa- dor, apesar das limita\'E7\'F5es inerentes a essa abordagem. Al\'E9m disso, identificar falhas de seguran\'E7a mostrou-se como a parte mais desafiadora do processo. Mesmo ao acreditar que todas as poss\'EDveis entradas do usu\'E1rio haviam sido consideradas, novas situa\'E7\'F5es surgiam durante os testes, exigindo um constante aprimoramento do sistema. Ademais, a ta tarefa de adicionar novas linhas de c\'F3digo ao sistema j\'E1 existente revelou-se complexa, pois era necess\'E1rio garantir que todas as partes se integrassem perfeitamente. Diante desses obst\'E1culos, foi necess\'E1rio adotar uma abordagem mais formal e meticulosa, seguindo os princ\'EDpios de POO, com o intuito de assegurar a efici\'EAncia e a seguran\'E7a do sistema como um todo.\par
Ap\'F3s isso, novos di\'E1logos tiveram in\'EDcio \'E0 respeito das m\'FAsicas e como as reprodu\'E7\'F5es seriam feitas. Assim, ficamos encarregados de criar funcionalidades que permitissem adicionar, remover e reproduzir faixas musicais no youtube, de modo que fosse garantido a leitura e escrita adequadas dos dados (das m\'FAsicas) em arquivos, bem como a manipula\'E7\'E3o correta das estruturas de dados. No entanto, ao longo do caminho foram identificados alguns empecilhos. Alguma delas foram, lidar com a manipula\'E7\'E3o de arquivos, abrir e fechar os arquivos corretamente e lidar com poss\'EDveis erros de escrita e leitura. Al\'E9m disso, a manipula\'E7\'E3o dos mapas (map) para armazenar as m\'FAsicas e seus links correspondentes tamb\'E9m se mostrou um obst\'E1culo a ser enfrentado. Outra dificuldade encontrada foi interagir com o sistema operacional para reproduzir as m\'FAsicas em interfaces de navega\'E7\'E3o web. Foi necess\'E1rio aprender sobre fun\'E7\'F5es como ShellExecute e descobrir como abrir os links de m\'FAsica e controlar a reprodu\'E7\'E3o de forma adequada.\par
J\'E1 a parte de desenvolver a pesquisa n\'E3o deu muito trabalho durante a implementa\'E7\'E3o. Optou-se por utilizar o "arquivo" onde ser\'E1 armazenado o nome do cantor, m\'FAsica e o link do YouTube. A classe "Pesquisa" ficarou respons\'E1vel por receber do usu\'E1rio qual artista/m\'FAsica ele deseja, retornando-os para que a classe {\b Musica} consiga buscar o link do YouTube atrav\'E9s do que o usu\'E1rio solicitar. Dessa maneira, realizar a pesquisa pelo arquivo atrav\'E9s da entrada do usu\'E1rio, tornou-se a parte mais desafiadora do processo. Teve-se que avaliar as poss\'EDveis entradas do usu\'E1rio e corrigi-las manualmente, uma vez que caso o usu\'E1rio pesquise por um determinado artista com letras min\'FAsculas, precisa-se transformar para o tipo de letra adequado com o "arquivo.txt" onde estava armazenado as informa\'E7\'F5es, para que assim pudesse estar encontrando. Al\'E9m disso, foi escolhido deixar que o usu\'E1rio fosse o mais livre poss\'EDvel nas entradas, ou seja, \'E9 poss\'EDvel que o usu\'E1rio entrasse com qualquer coisa, at\'E9 mesmo n\'FAmeros, onde caso n\'E3o exista, retornava um texto subjetivo informando "N\'E3o foi poss\'EDvel localizar a m\'FAsica/artista desejado.", assim como ocorre nas pesquisas do Google Chrome. Por fim, seguindo a mesma ideia, o programa foi elaborado para realizar pesquisas inteligentes, onde surgir\'E3o sugest\'F5es de pesquisa com base na semelhan\'E7a da sintaxe.\par
Dessa forma, pensando em como enriquecer nosso c\'F3digo, foram desenvolvidos m\'E9todos para a cria\'E7\'E3o de coment\'E1rios e rea\'E7\'F5es em uma determinada m\'FAsica. Assim, criaram-se funcionalidades que permitissem o usu\'E1rio dar sua avalia\'E7\'E3o sobre a musica reproduzida. O principal problema encontrado estava na manipula\'E7\'E3o de arquivos, bem como abrir e fechar os arquivos corretamente, lidar com poss\'EDveis erros de escrita, sobre escrever partes j\'E1 escritas no meio do texto se mostrou ser um grande desfio.\par
Por fim, a \'FAltima etapa do trabalho foi padronizar as linhas de c\'F3digo como um todo. Assim, padroniza\'E7\'E3o de coment\'E1rios nos arquivos cpp, n\'FAmero m\'E1ximo de colunas a serem usadas e implementa\'E7\'E3o de boas pr\'E1ticas foram algumas das preocupa\'E7\'F5es finais do grupo. Isso tudo foi pensado em fun\'E7\'E3o da documenta\'E7\'E3o a ser gerada, de modo a tornar o programa algo did\'E1tico e que se encaixasse nos padr\'F5es adotados durante as aulas. Logo, ap\'F3s finalizado, adotamos as normas estabelecidas pelo Doxygen para gerar formalmente toda documenta\'E7\'E3o do aplicativo. Os principais problemas identificados neste processo foi entender o comportamento do DoxyGen e identificar um padr\'E3o de escrita do c\'F3digo, uma vez que, ap\'F3s finaliza\'E7\'E3o do c\'F3digo, um processo de padroniza\'E7\'E3o foi iniciado. Al\'E9m disso, no est\'E1gio final, identificaram-se alguns problemas de escrita no c\'F3digo, o que foi facilmente solucionado.\par
Professor: Luigi\par
{\b Dados do Projeto:} \par
O que \'E9?:{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
software gerenciador de reprodutor de m\'FAsicas.\par}
\par
Qual seu status?:{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Elabora\'E7\'E3o conceitual do projeto e divis\'E3o de demandas\par}
\par
Tecnologias utilizadas:{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Visual St\'FAdio Code;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Github;\par}
\par
Como usar: ...\par
Coment\'E1rios: ...\par
User Stories: \par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Como o usu\'E1rio deseja construir uma playlist de m\'FAsicas que ele mais gosta, desejo criar uma lista de m\'FAsicas adicion\'E1-las e retir\'E1-las, para que ele possa salvar os t\'EDtulos do seu agrado e escut\'E1-las posteriormente.\par}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  * As m\'FAsicas ficarem salvas; \par
\par
 * Incluir m\'FAsicas na playlist; \par
\par
 * Excluir m\'FAsicas na playlist; \par
\par
 * Nomear a playlist;\par
}
\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Como o usu\'E1rio deseja pesquisar por m\'FAsicas, quero criar uma barra de pesquisa, para que seja poss\'EDvel achar rapidamente o t\'EDtulo procurado.\par}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  * Espa\'E7o destinado para o usu\'E1rio digitar o nome da m\'FAsica a qual ser\'E1 feita a pesquisa; \par
\par
 * A barra de pesquisa deve ser testada quanto \'E0 usabilidade e facilidade, para garantir que seja simples de usar e entender para o usu\'E1rio final; \par
\par
 * O usu\'E1rio deve poder reproduzir a m\'FAsica que aparecer ap\'F3s a pesquisa; \par
}
\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Como o usu\'E1rio deseja dar um feedback sobre a m\'FAsica a qual ele escutou, quero que seja poss\'EDvel curtir ou descurtir o t\'EDtulo em quest\'E3o.{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Curtir ou descurtir a m\'FAsica;\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Contar os n\'FAmeros de curtidas;\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Contar os n\'FAmeros de \'93dislikes\'94;\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Criar caixas de di\'E1logos; \par
}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Como o usu\'E1rio deseja criar e/ou logar em uma conta, quero criar um banco de dados com o perfil de cada usu\'E1rio, para seja poss\'EDvel aprimorar a organiza\'E7\'E3o da plataforma.\par}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  * Criar login; \par
\par
 * Criar senha; \par
\par
 * O usu\'E1rio deve informar um e-mail; \par
\par
 * Cadastrar usu\'E1rio; \par
\par
 * Enviar uma mensagem de confirma\'E7\'E3o para o e-mail informado; \par
}
\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Como o usu\'E1rio deve realizar opera\'E7\'F5es b\'E1sicas na plataforma, deve haver uma interface de a\'E7\'F5es interativas, para que ele possa pular ou voltar m\'FAsicas, al\'E9m de ver informa\'E7\'F5es (g\'EAnero da m\'FAsica). \par
}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  * Reproduzir as m\'FAsicas escolhidas; \par
\par
 * Pular para pr\'F3xima m\'FAsica; \par
\par
 * Pular para m\'FAsica anterior; \par
\par
 * Acessar informa\'E7\'F5es; \par
}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Classes Obtitas:\par}
\par
<<<<<<< HEAD{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Usu\'E1rio;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
M\'FAsica;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Playlist;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Curtida};\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Comentario}; \par}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
* Cadastro;
\par}
{\tc\tcl2 \v * Cadastro;}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Login};\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SingUp;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ChangeUsername};\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DeleteAccount};\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Iniciar}; \par
{\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid \par
{\pard\plain \s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \par
{\pard\plain \s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \par
{\pard\plain \s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \par
{\pard\plain \s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \par
{\pard\plain \s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \par
{\pard\plain \s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \zwjorigin/master \par
}}}}}}}}
\par
\par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespaces\par \pard\plain 
{\tc \v Namespaces}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Lista de Namespaces\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Esta \'E9 a lista de todos os Namespaces com suas respectivas descri\'E7\'F5es:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b Pesquisa} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CDndice dos Componentes\par \pard\plain 
{\tc \v \'CDndice dos Componentes}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Lista de Classes\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Aqui est\'E3o as classes, estruturas, uni\'F5es e interfaces e suas respectivas descri\'E7\'F5es:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b ChangeUsername} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Comentario} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Curtida} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b DeleteAccount} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Iniciar} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Login} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Musica} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe respons\'E1vel pelo gerenciamento das m\'FAsicas })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Pesquisa::Pesquisar} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b reproducao} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe respons\'E1vel pela reprodu\'E7\'E3o das m\'FAsicas })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Signup} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CDndice dos Arquivos\par \pard\plain 
{\tc \v \'CDndice dos Arquivos}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Lista de Arquivos\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Esta \'E9 a lista de todos os arquivos e suas respectivas descri\'E7\'F5es:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b git hub/Projeto_Stream/{\b cadastrousuario.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b git hub/Projeto_Stream/{\b cadastrousuario.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b git hub/Projeto_Stream/{\b feedback.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b git hub/Projeto_Stream/{\b feedback.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b git hub/Projeto_Stream/{\b main.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b git hub/Projeto_Stream/{\b musicas.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b git hub/Projeto_Stream/{\b musicas.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b git hub/Projeto_Stream/{\b pesquisa.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b git hub/Projeto_Stream/{\b pesquisa.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b git hub/Projeto_Stream/{\b reproducao.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b git hub/Projeto_Stream/{\b reproducao.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b git hub/Projeto_Stream/{\b testes.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Ref\'EAncia do Namespace Pesquisa\par \pard\plain 
{\tc\tcl2 \v Pesquisa}
{\xe \v Pesquisa}
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Pesquisar}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Classes{\tc \v Classes}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe ChangeUsername\par \pard\plain 
{\tc\tcl2 \v ChangeUsername}
{\xe \v ChangeUsername}
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
\par
{
{\f2 #include <cadastrousuario.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b change_username} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Altera o nome de usu\'E1rio. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Defini\'E7\'E3o na linha {\b 43} do arquivo {\b cadastrousuario.hpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v change_username\:ChangeUsername}
{\xe \v ChangeUsername\:change_username}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ChangeUsername::change_username ()}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Altera o nome de usu\'E1rio. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Solicita o nome de usu\'E1rio e senha atuais, verifica se as credenciais est\'E3o corretas, solicita o novo nome de usu\'E1rio e atualiza as informa\'E7\'F5es no arquivo "usuariosenha.txt". \par
}{
Defini\'E7\'E3o na linha {\b 178} do arquivo {\b cadastrousuario.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00178                                      \{\par
00179     std::string usuario, senha, novoUsuario;\par
00180 \par
00181     std::cout << {\cf22 "Digite o nome de usuario atual: "};\par
00182     getline(std::cin, usuario);\par
00183     std::cout << std::endl;\par
00184 \par
00185     std::cout << {\cf22 "Digite a senha: "};\par
00186     getline(std::cin, senha);\par
00187     std::cout << std::endl;\par
00188 \par
00189     std::ifstream usuariosArquivo({\cf22 "usuariosenha.txt"});\par
00190     {\cf19 if} (usuariosArquivo.is_open()) \{\par
00191         std::string linha;\par
00192         std::vector<std::string> usuarios;\par
00193 \par
00194         {\cf19 while} (getline(usuariosArquivo, linha)) \{\par
00195             usuarios.push_back(linha);\par
00196         \}\par
00197 \par
00198         usuariosArquivo.close();\par
00199 \par
00200         {\cf17 auto} itUsuario = std::find(usuarios.begin(), usuarios.end(), usuario);\par
00201         {\cf17 auto} itSenha = itUsuario;  {\cf20 /*Atualiza para itUsuario*/}\par
00202 \par
00203         {\cf19 if} (itUsuario != usuarios.end() && itSenha != usuarios.end()) \{\par
00204             ++itSenha;  {\cf20 /*Avan\'E7a para a pr\'F3xima linha (senha)*/}\par
00205 \par
00206             {\cf19 if} (*(itSenha) == hashSenha(senha)) \{  {\cf20 /*Verifica a senha original*/}\par
00207                 std::cout << {\cf22 "Digite o novo nome de usuario: "};\par
00208                 getline(std::cin, novoUsuario);\par
00209                 std::cout << std::endl;\par
00210 \par
00211                 {\cf19 while} (std::find(usuarios.begin(), usuarios.end(), novoUsuario) != usuarios.end()) \{\par
00212                     std::cout << {\cf22 "O nome de usuario escolhido ja esta em uso!"} << std::endl;\par
00213                     std::cout << {\cf22 "Digite outro novo nome de usuario: "};\par
00214                     getline(std::cin, novoUsuario);\par
00215                     std::cout << std::endl;\par
00216                 \}\par
00217 \par
00218                 *itUsuario = novoUsuario;\par
00219 \par
00220                 std::ofstream usuariosArquivo({\cf22 "usuariosenha.txt"}, std::ios::trunc);\par
00221                 {\cf19 if} (usuariosArquivo.is_open()) \{\par
00222                     {\cf19 for} ({\cf17 const} std::string& u : usuarios) \{\par
00223                         usuariosArquivo << u << {\cf23 '\\n'};\par
00224                     \}\par
00225                     usuariosArquivo.close();\par
00226 \par
00227                     std::cout << {\cf22 "Nome de usuario alterado com sucesso!"} << std::endl;\par
00228                 \} {\cf19 else} \{\par
00229                     std::cout << {\cf22 "Erro ao abrir o arquivo de usuarios!"} << std::endl;\par
00230                 \}\par
00231             \} {\cf19 else} \{\par
00232                 std::cout << {\cf22 "Senha incorreta!"} << std::endl;\par
00233             \}\par
00234         \} {\cf19 else} \{\par
00235             std::cout << {\cf22 "Nome de usuario nao encontrado!"} << std::endl;\par
00236         \}\par
00237     \} {\cf19 else} \{\par
00238         std::cout << {\cf22 "Erro ao abrir o arquivo de usuarios!"} << std::endl;\par
00239     \}\par
00240 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
git hub/Projeto_Stream/{\b cadastrousuario.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
git hub/Projeto_Stream/{\b cadastrousuario.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe Comentario\par \pard\plain 
{\tc\tcl2 \v Comentario}
{\xe \v Comentario}
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
\par
{
{\f2 #include <feedback.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Fazer_comentario} (std::string, std::string)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Permite fazer um coment\'E1rio em uma m\'FAsica. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Ler_comentario} (std::string, std::string)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Permite que um usu\'E1rio leia um coment\'E1rio em uma m\'FAsica. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Defini\'E7\'E3o na linha {\b 13} do arquivo {\b feedback.hpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v Fazer_comentario\:Comentario}
{\xe \v Comentario\:Fazer_comentario}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Comentario::Fazer_comentario (std::string  {\i Musica}, std::string  {\i Usuario})}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Permite fazer um coment\'E1rio em uma m\'FAsica. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O arquivo "Feedback.txt" \'E9 aberto e o usu\'E1rio tem a possibilidade de fazer um coment\'E1rio. Ap\'F3s isso, o arquivo armazenar\'E1 toda informa\'E7\'E3o adicionada.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i musica} \cell }{String do nome da m\'FAsica. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i usuario} \cell }{String do nome do usu\'E1rio. \cell }
{\row }
}
}{
Defini\'E7\'E3o na linha {\b 4} do arquivo {\b feedback.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00004                                                                     \{\par
00005     std::ofstream arquivo({\cf22 "FeedBack.txt"}, std::ios::app);\par
00006     {\cf19 if} (arquivo.is_open()) \{\par
00007     std::string comentario;\par
00008     std::cin.ignore(); {\cf20 /*usado para a criacao do comentario.*/}\par
00009     std::cout << {\cf22 "Digite seu comentario: "};\par
00010     std::getline(std::cin, comentario);\par
00011     \par
00012     arquivo << Musica << {\cf22 " , "} << Usuario << {\cf22 ":"} << comentario << std::endl; {\cf20 /*Adiciona o coment\'E1rio a mesma linha.*/}\par
00013     arquivo.close();\par
00014 \par
00015     std::cout << {\cf22 "Comentario registrado com sucesso!"} << std::endl;\par
00016     \} {\cf19 else} \{\par
00017     std::cout << {\cf22 "Nao foi possivel abrir o arquivo."} << std::endl;\par
00018     \}\par
00019 \}\par
}
}
{\xe \v Ler_comentario\:Comentario}
{\xe \v Comentario\:Ler_comentario}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Comentario::Ler_comentario (std::string  {\i Musica}, std::string  {\i Usuario})}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Permite que um usu\'E1rio leia um coment\'E1rio em uma m\'FAsica. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O arquivo "Feedback.txt" \'E9 aberto em modo leitura. Feito isso, linha por linha \'E9 percorrida com a finalidade de encontrar a m\'FAsica e o usu\'E1rio especificado. Ap\'F3s isso, toda informa\'E7\'E3o \'E9 armazenada no vetor "_comentarios" e imprime a mensagem encontrada.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i musica} \cell }{String do nome da m\'FAsica. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i usuario} \cell }{String do nome do usu\'E1rio. \par
 \cell }
{\row }
}
}{
Defini\'E7\'E3o na linha {\b 22} do arquivo {\b feedback.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00022                                                                    \{\par
00023     std::ifstream arquivo({\cf22 "FeedBack.txt"});\par
00024     std::string linha;\par
00025     {\cf19 if} (arquivo.is_open()) \{\par
00026         {\cf19 while} (getline(arquivo, linha)) \{\par
00027 \par
00028             std::size_t posMusica = linha.find(Musica);\par
00029             \par
00030             {\cf19 if} (posMusica != std::string::npos) \{\par
00031                 std::size_t separator = linha.find({\cf22 ","});\par
00032                 {\cf19 if} (separator != std::string::npos) \{\par
00033                     std::string comentario = linha.substr(separator + 2);\par
00034                     _comentarios.push_back(comentario);\par
00035                 \}\par
00036             \}\par
00037         \}\par
00038         arquivo.close();\par
00039 \par
00040         {\cf20 /*Imprimir os comentarios encontrados.*/}\par
00041         {\cf19 if} (!_comentarios.empty()) \{\par
00042             std::cout << {\cf22 "Comentarios encontrados:"} << std::endl;\par
00043             {\cf19 for} ({\cf17 const} {\cf17 auto}& comentario : _comentarios) \{\par
00044                 std::cout << comentario << std::endl;\par
00045             \}\par
00046         \} {\cf19 else} \{\par
00047             std::cout << {\cf22 "Nenhum comentario encontrado para essa musica e artista."} << std::endl;\par
00048         \}\par
00049     \} {\cf19 else} \{\par
00050         std::cout << {\cf22 "Erro ao abrir o arquivo."} << std::endl;\par
00051     \}\par
00052 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
git hub/Projeto_Stream/{\b feedback.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
git hub/Projeto_Stream/{\b feedback.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe Curtida\par \pard\plain 
{\tc\tcl2 \v Curtida}
{\xe \v Curtida}
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
\par
{
{\f2 #include <feedback.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b like} (std::string, std::string)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Adiciona um "Like" \'E0 m\'FAsica escolhida. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b dislike} (std::string, std::string)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ver_quatidade_curtias} (std::string)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Conta o n\'FAmero de "Likes" e "Deslikes". }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b verificacao_curtidas} (std::string, std::string)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Verifica se um us\'FAario j\'E1 deu ou n\'E3o alguma rea\'E7\'E3o em uma m\'FAsica. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b removerLinha} (std::string usuario, std::string musica)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove uma linha de arquivo de curtidas. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Defini\'E7\'E3o na linha {\b 39} do arquivo {\b feedback.hpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v dislike\:Curtida}
{\xe \v Curtida\:dislike}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Curtida::dislike (std::string  {\i Musica}, std::string  {\i Usuario})}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 133} do arquivo {\b feedback.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00133                                                          \{\par
00134     {\cf19 if} (verificacao_curtidas(Usuario, Musica)) \{\par
00135         removerLinha(Usuario, Musica);\par
00136         std::ofstream arquivo({\cf22 "Curtidas.txt"}, std::ios::app);\par
00137         {\cf19 if} (arquivo.is_open()) \{\par
00138             arquivo << Musica << {\cf22 ", "} << Usuario << {\cf22 ": "} << {\cf22 "Dislike"} << std::endl;\par
00139             arquivo.close();\par
00140             std::cout << {\cf22 "Dislike registrado com sucesso."} << std::endl;\par
00141         \} {\cf19 else} \{\par
00142             std::cout << {\cf22 "Nao foi poss\'EDvel abrir o arquivo."} << std::endl;\par
00143         \}\par
00144     \} {\cf19 else} \{\par
00145         std::ofstream arquivo({\cf22 "Curtidas.txt"}, std::ios::app);\par
00146         {\cf19 if} (arquivo.is_open()) \{\par
00147             arquivo << Musica << {\cf22 ", "} << Usuario << {\cf22 ": "} << {\cf22 "Dislike"} << std::endl;\par
00148             arquivo.close();\par
00149             std::cout << {\cf22 "Dislike registrado com sucesso."} << std::endl;\par
00150         \} {\cf19 else} \{\par
00151             std::cout << {\cf22 "Nao foi poss\'EDvel abrir o arquivo."} << std::endl;\par
00152         \}\par
00153     \}\par
00154 \} \par
}
}
{\xe \v like\:Curtida}
{\xe \v Curtida\:like}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Curtida::like (std::string  {\i Musica}, std::string  {\i Usuario})}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Adiciona um "Like" \'E0 m\'FAsica escolhida. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i musica} \cell }{String do nome da m\'FAsica. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i usuario} \cell }{String do nome do usu\'E1rio. \par
 \cell }
{\row }
}
}{
Defini\'E7\'E3o na linha {\b 108} do arquivo {\b feedback.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00108                                                      \{\par
00109      {\cf19 if} (verificacao_curtidas(Usuario, Musica)) \{\par
00110         removerLinha(Usuario, Musica);\par
00111         std::ofstream arquivo({\cf22 "Curtidas.txt"}, std::ios::app);\par
00112 \par
00113         {\cf19 if} (arquivo.is_open()) \{\par
00114             arquivo << Musica << {\cf22 ", "} << Usuario << {\cf22 ": "} << {\cf22 "Like"} << std::endl;\par
00115             arquivo.close();\par
00116             std::cout << {\cf22 "Like registrado com sucesso."} << std::endl;\par
00117         \} {\cf19 else} \{\par
00118             std::cout << {\cf22 "Nao foi poss\'EDvel abrir o arquivo."} << std::endl;\par
00119         \}\par
00120     \}{\cf19 else}\{\par
00121         std::ofstream arquivo({\cf22 "Curtidas.txt"}, std::ios::app);\par
00122 \par
00123         {\cf19 if} (arquivo.is_open()) \{\par
00124             arquivo << Musica << {\cf22 ", "} << Usuario << {\cf22 ": "} << {\cf22 "Like"} << std::endl;\par
00125             arquivo.close();\par
00126             std::cout << {\cf22 "Like registrado com sucesso."} << std::endl;\par
00127         \} {\cf19 else} \{\par
00128             std::cout << {\cf22 "Nao foi poss\'EDvel abrir o arquivo."} << std::endl;\par
00129         \}\par
00130     \}\par
00131 \} \par
}
}
{\xe \v removerLinha\:Curtida}
{\xe \v Curtida\:removerLinha}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Curtida::removerLinha (std::string  {\i usuario}, std::string  {\i musica})}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove uma linha de arquivo de curtidas. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i usuario} \cell }{String do nome do usu\'E1rio. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i musica} \cell }{String do nome da m\'FAsica. \cell }
{\row }
}
}{
Defini\'E7\'E3o na linha {\b 56} do arquivo {\b feedback.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00056                                                               \{\par
00057     std::ifstream arquivoEntrada({\cf22 "Curtidas.txt"});\par
00058     std::string linha;\par
00059     {\cf18 bool} linhaRemovida = {\cf17 false};\par
00060 \par
00061     {\cf19 if} (arquivoEntrada.is_open()) \{\par
00062         std::vector<std::string> linhasRestantes;\par
00063 \par
00064         {\cf19 while} (getline(arquivoEntrada, linha)) \{\par
00065             {\cf19 if} (linha.find(musica) != std::string::npos && linha.find(usuario) != std::string::npos) \{\par
00066                 linhaRemovida = {\cf17 true};\par
00067             \} {\cf19 else} \{\par
00068                 linhasRestantes.push_back(linha);\par
00069             \}\par
00070         \}\par
00071 \par
00072         arquivoEntrada.close();\par
00073        \par
00074 \par
00075         {\cf19 if} (linhaRemovida) \{\par
00076             std::ofstream arquivoFinal({\cf22 "Curtidas.txt"});\par
00077             {\cf19 for} ({\cf17 const} std::string& linha : linhasRestantes) \{\par
00078                 arquivoFinal << linha << std::endl;\par
00079             \}\par
00080             arquivoFinal.close();\par
00081 \par
00082         \} \par
00083     \} {\cf19 else} \{\par
00084         std::cout << {\cf22 "N\'E3o foi poss\'EDvel abrir o arquivo."} << std::endl;\par
00085         \par
00086     \}\par
00087 \}\par
}
}
{\xe \v ver_quatidade_curtias\:Curtida}
{\xe \v Curtida\:ver_quatidade_curtias}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Curtida::ver_quatidade_curtias (std::string  {\i Musica})}}
\par
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Conta o n\'FAmero de "Likes" e "Deslikes". }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i {\b Musica}} \cell }{String do nome da m\'FAsica. \par
 \cell }
{\row }
}
}{
Defini\'E7\'E3o na linha {\b 156} do arquivo {\b feedback.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00156                                                     \{\par
00157     std::ifstream arquivo({\cf22 "Curtidas.txt"});\par
00158     std::string linha;\par
00159     Contl=0;\par
00160     Contd=0;\par
00161 \par
00162     {\cf19 if} (arquivo.is_open()) \{\par
00163         {\cf19 while} (getline(arquivo, linha)) \{\par
00164             std::size_t posMusica = linha.find(Musica);\par
00165             {\cf19 if} (posMusica != std::string::npos) \{\par
00166                 std::size_t separator = linha.find({\cf22 ":"});\par
00167                 {\cf19 if} (separator != std::string::npos) \{\par
00168                     std::string like = linha.substr(separator + 2);\par
00169                     {\cf19 if}(like == {\cf22 "Like"}) Contl++;\par
00170                     {\cf19 else} {\cf19 if}(like=={\cf22 "Dislike"}) Contd++;\par
00171                 \}\par
00172             \}\par
00173         \}\par
00174         arquivo.close();\par
00175 \par
00176         {\cf20 /*Imprimir quantidade de likes encontrados.*/}\par
00177        std:: cout <<{\cf22 "Quantidade de likes: "}<< Contl << std:: endl;\par
00178        std:: cout <<{\cf22 "Quantidade de dislikes: "}<< Contd << std:: endl;\par
00179     \} {\cf19 else} \{\par
00180         std::cout << {\cf22 "Erro ao abrir o arquivo."} << std::endl;\par
00181     \}\par
00182 \}\par
}
}
{\xe \v verificacao_curtidas\:Curtida}
{\xe \v Curtida\:verificacao_curtidas}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Curtida::verificacao_curtidas (std::string  {\i Usuario}, std::string  {\i Musica})}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Verifica se um us\'FAario j\'E1 deu ou n\'E3o alguma rea\'E7\'E3o em uma m\'FAsica. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i usuario} \cell }{String do nome do usu\'E1rio. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i musica} \cell }{String do nome da m\'FAsica. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Verdadeiro se encontrar o usu\'E1rio, Falso caso contr\'E1rio. \par
}}}{
Defini\'E7\'E3o na linha {\b 89} do arquivo {\b feedback.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00089                                                                      \{\par
00090     std:: ifstream arquivo ({\cf22 "Curtidas.txt"});\par
00091     std:: string linha;\par
00092     {\cf19 if}(arquivo.is_open())\{\par
00093         \par
00094         {\cf19 while} (getline(arquivo, linha))\{\par
00095             {\cf19 if}(linha.find(Musica) != std::string::npos)\{\par
00096                 {\cf19 if}(linha.find(Usuario))\{\par
00097                     {\cf19 return} {\cf17 true};\par
00098                 \}\par
00099             \}\par
00100         \}\par
00101         \par
00102     \}{\cf19 else} \{\par
00103         std:: cout << {\cf22 "Nao foi possivel abrir o arquivo."}<< std :: endl;\par
00104     \}\par
00105         {\cf19 return} {\cf17 false};\par
00106 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
git hub/Projeto_Stream/{\b feedback.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
git hub/Projeto_Stream/{\b feedback.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe DeleteAccount\par \pard\plain 
{\tc\tcl2 \v DeleteAccount}
{\xe \v DeleteAccount}
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
\par
{
{\f2 #include <cadastrousuario.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b delete_account} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Exclui a conta de um usu\'E1rio. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b verificar_existencia_usuario} (const std::string &usuario)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Verifica se h\'E1 um determinado usu\'E1rio no arquivo "usuariosenha.txt". }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Defini\'E7\'E3o na linha {\b 54} do arquivo {\b cadastrousuario.hpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v delete_account\:DeleteAccount}
{\xe \v DeleteAccount\:delete_account}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void DeleteAccount::delete_account ()}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Exclui a conta de um usu\'E1rio. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Solcita o nome de us\'E1rio, bem como sua senha e verifica a veracidade das informa\'E7\'F5es. Ap\'F3s isso, exclui as informa\'E7\'F5es do usu\'E1rio no arquivo "usuariosenha.txt". \par
}{
Defini\'E7\'E3o na linha {\b 243} do arquivo {\b cadastrousuario.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00243                                    \{\par
00244     std::string usuario, senha;\par
00245 \par
00246     std::cout << {\cf22 "Digite o nome de usuario: "};\par
00247     getline(std::cin, usuario);\par
00248     std::cout << std::endl;\par
00249 \par
00250     std::cout << {\cf22 "Digite a senha: "};\par
00251     getline(std::cin, senha);\par
00252     std::cout << std::endl;\par
00253 \par
00254     {\cf19 if} (verificar_credenciais(usuario, senha)) \{\par
00255         {\cf19 if} (verificar_existencia_usuario(usuario)) \{\par
00256             delete_account(usuario);\par
00257         \} {\cf19 else} \{\par
00258             std::cout << {\cf22 "A conta que deseja excluir nao existe."} << std::endl;\par
00259         \}\par
00260     \} {\cf19 else} \{\par
00261         std::cout << {\cf22 "Credenciais invalidas. Nao foi possivel apagar a conta."} << std::endl;\par
00262     \}\par
00263 \}\par
}
}
{\xe \v verificar_existencia_usuario\:DeleteAccount}
{\xe \v DeleteAccount\:verificar_existencia_usuario}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool DeleteAccount::verificar_existencia_usuario (const std::string &  {\i usuario})}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Verifica se h\'E1 um determinado usu\'E1rio no arquivo "usuariosenha.txt". }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i usuario} \cell }{Suposto usu\'E1rio cadastrado. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Verdadeiro se o usu\'E1rio existir, Falso caso contr\'E1rio. \par
}}}{
Defini\'E7\'E3o na linha {\b 326} do arquivo {\b cadastrousuario.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00326                                                                          \{\par
00327     std::ifstream usuariosArquivo({\cf22 "usuariosenha.txt"});\par
00328     {\cf19 if} (usuariosArquivo.is_open()) \{\par
00329         std::string testeusuario;\par
00330 \par
00331         {\cf19 while} (getline(usuariosArquivo, testeusuario)) \{\par
00332             {\cf19 if} (usuario == testeusuario) \{\par
00333                 usuariosArquivo.close();\par
00334                 {\cf19 return} {\cf17 true};\par
00335             \}\par
00336             getline(usuariosArquivo, testeusuario);  {\cf20 /*Descarta a linha da senha correspondente*/}\par
00337         \}\par
00338 \par
00339         usuariosArquivo.close();\par
00340     \}\par
00341 \par
00342     {\cf19 return} {\cf17 false};\par
00343 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
git hub/Projeto_Stream/{\b cadastrousuario.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
git hub/Projeto_Stream/{\b cadastrousuario.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe Iniciar\par \pard\plain 
{\tc\tcl2 \v Iniciar}
{\xe \v Iniciar}
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
\par
{
{\f2 #include <cadastrousuario.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b exibirlogo} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Exibe a logotipo escolhida para o projeto. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b menu} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Exibe o menu principal do aplicativo. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Defini\'E7\'E3o na linha {\b 82} do arquivo {\b cadastrousuario.hpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v exibirlogo\:Iniciar}
{\xe \v Iniciar\:exibirlogo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Iniciar::exibirlogo ()}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Exibe a logotipo escolhida para o projeto. }}\par
{
Defini\'E7\'E3o na linha {\b 353} do arquivo {\b cadastrousuario.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00353                          \{\par
00354     std::cout << {\cf22 "==============================="} << std::endl;\par
00355     std::cout << {\cf22 "           PANCADAO            "} << std::endl;\par
00356     std::cout << {\cf22 "==============================="} << std::endl;\par
00357     std::cout << std::endl;\par
00358     std::cout << std::endl;\par
00359 \}\par
}
}
{\xe \v menu\:Iniciar}
{\xe \v Iniciar\:menu}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Iniciar::menu ()}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Exibe o menu principal do aplicativo. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O usu\'E1rio poder\'E1 escolher entre fazer o login, realizar o cadastro, trocar o nome de usu\'E1rio ou apagar uma conta existente.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
O nome do usu\'E1rio ap\'F3s o login. \par
}}}{
Defini\'E7\'E3o na linha {\b 371} do arquivo {\b cadastrousuario.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00371                         \{\par
00372 \par
00373 {\cf19 while}({\cf17 true})\{\par
00374     std::cout << {\cf22 "Entre agora no melhor app de musica"} << std::endl;\par
00375     std::cout << std::endl;\par
00376     std::cout << {\cf22 "Digite 1, 2, 3 ou 4 para escolher uma opcao: "} << std::endl;\par
00377     std::cout << {\cf22 "1. Sign_up"} << std::endl;\par
00378     std::cout << {\cf22 "2. Login"} << std::endl;\par
00379     std::cout << {\cf22 "3. Trocar nome de usuario"} << std::endl;\par
00380     std::cout << {\cf22 "4. Apagar conta de usuario"} << std::endl;\par
00381    \par
00382 \par
00383    \par
00384 \par
00385    {\cf18 int} opcao = 0;\par
00386     {\cf19 while} ({\cf17 true}) \{\par
00387         {\cf19 if} (!(std::cin >> opcao) || (opcao != 1 && opcao != 2 && opcao != 3 && opcao != 4)) \{\par
00388             std::cout << {\cf22 "Opcao invalida!!"}<< std::endl;\par
00389             std::cout << {\cf22 "Digite (1) para sign_up, (2) para login, (3) para mudar o nome de usuario ou (4) para apagar conta de usuario: "}<< std::endl;\par
00390 \par
00391             std::cin.clear();\par
00392             std::cin.ignore(std::numeric_limits<std::streamsize>::max(), {\cf23 '\\n'});\par
00393         \} {\cf19 else} \{\par
00394             {\cf19 break};\par
00395         \}\par
00396     \}\par
00397     std::cin.ignore();\par
00398 \par
00399 \par
00400     {\cf19 if} (opcao == 1) \{\par
00401         Signup fazer;\par
00402         fazer.sign_up();\par
00403     \}\par
00404     {\cf19 else} {\cf19 if} (opcao == 2) \{\par
00405         std::string retorno;\par
00406         Login fazer;\par
00407         fazer.login();\par
00408         retorno = fazer.getternomedeusuario();\par
00409         {\cf19 return} retorno;\par
00410         {\cf19 break};\par
00411     \}\par
00412     {\cf19 else} {\cf19 if} (opcao == 3) \{\par
00413         ChangeUsername fazer;\par
00414         fazer.change_username();\par
00415     \}\par
00416     {\cf19 else} {\cf19 if} (opcao == 4) \{\par
00417         DeleteAccount fazer;\par
00418         fazer.delete_account();\par
00419     \}\par
00420 \}\par
00421 \};\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
git hub/Projeto_Stream/{\b cadastrousuario.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
git hub/Projeto_Stream/{\b cadastrousuario.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe Login\par \pard\plain 
{\tc\tcl2 \v Login}
{\xe \v Login}
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
\par
{
{\f2 #include <cadastrousuario.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b login} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Realiza o login de um usu\'E1rio. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b getternomedeusuario} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Defini\'E7\'E3o na linha {\b 18} do arquivo {\b cadastrousuario.hpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v getternomedeusuario\:Login}
{\xe \v Login\:getternomedeusuario}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Login::getternomedeusuario ()}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 361} do arquivo {\b cadastrousuario.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00361                                      \{\par
00362     {\cf19 return} _nomedeusuario;\par
00363 \}\par
}
}
{\xe \v login\:Login}
{\xe \v Login\:login}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Login::login ()}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Realiza o login de um usu\'E1rio. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Solicita o nome de usu\'E1rio e a senha, l\'EA as informa\'E7\'F5es do arquivo "usuariosenha.txt" e verifica se as credenciais est\'E3o certas. \par
}{
Defini\'E7\'E3o na linha {\b 22} do arquivo {\b cadastrousuario.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00022                   \{\par
00023 \par
00024     std::string usuario, senha, testeusuario, testesenha;\par
00025     \par
00026 \par
00027     std::ifstream confirma({\cf22 "usuariosenha.txt"});\par
00028 \par
00029     {\cf19 if} (confirma.is_open()) \{\par
00030         {\cf18 bool} usuarioEncontrado = {\cf17 false};\par
00031         {\cf18 bool} loginBemSucedido = {\cf17 false};\par
00032 \par
00033         {\cf19 while} (!loginBemSucedido) \{\par
00034             usuarioEncontrado = {\cf17 false};\par
00035             std::cout << {\cf22 "Digite aqui o nome de usuario: "};\par
00036             getline(std::cin, usuario);\par
00037             std::cout << std::endl;\par
00038 \par
00039             {\cf19 while} (getline(confirma, testeusuario)) \{\par
00040                 {\cf19 if} (usuario == testeusuario) \{\par
00041                     usuarioEncontrado = {\cf17 true};\par
00042                     getline(confirma, testesenha);\par
00043                     {\cf19 break};\par
00044                 \}\par
00045                 getline(confirma, testesenha);  {\cf20 /*Descarta a linha da senha correspondente*/}\par
00046             \}\par
00047 \par
00048             {\cf19 if} (usuarioEncontrado) \{\par
00049                 std::cout << {\cf22 "Digite aqui a senha: "};\par
00050                 getline(std::cin, senha);\par
00051                 std::cout << std::endl;\par
00052 \par
00053                 {\cf19 if} (hashSenha(senha) == testesenha) \{\par
00054                     std::cout << {\cf22 "LOGIN BEM SUCEDIDO!"} << std::endl;\par
00055                     std::cout << std::endl;\par
00056                     loginBemSucedido = {\cf17 true};\par
00057                     _nomedeusuario=usuario;\par
00058                 \} \par
00059                 {\cf19 else} \{\par
00060                     std::cout << {\cf22 "Senha incorreta!"} << std::endl;\par
00061                 \}\par
00062             \}\par
00063             {\cf19 else} \{\par
00064                 std::cout << {\cf22 "Nome de usuario nao encontrado!"} << std::endl;\par
00065             \}\par
00066             confirma.clear();\par
00067             confirma.seekg(0, std::ios::beg);\par
00068         \}\par
00069 \par
00070         confirma.close();\par
00071     \}\par
00072     {\cf19 else} \{\par
00073         std::cout << {\cf22 "Erro ao abrir o arquivo!"} << std::endl;\par
00074     \}\par
00075     \par
00076 \};\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
git hub/Projeto_Stream/{\b cadastrousuario.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
git hub/Projeto_Stream/{\b cadastrousuario.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe Musica\par \pard\plain 
{\tc\tcl2 \v Musica}
{\xe \v Musica}
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe respons\'E1vel pelo gerenciamento das m\'FAsicas. }}\par
{
{\f2 #include <musicas.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Musica} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adicionar_musica} (const std::string &nomeArquivo)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Adiciona uma m\'FAsica ao sitema. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Remove_musica} (const std::string &nomeArquivo)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove uma m\'FAsica do arquivo. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe respons\'E1vel pelo gerenciamento das m\'FAsicas. \par
}{
Defini\'E7\'E3o na linha {\b 7} do arquivo {\b musicas.hpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v Musica\:Musica}
{\xe \v Musica\:Musica}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Musica::Musica ()}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 4} do arquivo {\b musicas.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00005 \{\par
00006     \par
00007 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v adicionar_musica\:Musica}
{\xe \v Musica\:adicionar_musica}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Musica::adicionar_musica (const std::string &  {\i nomeArquivo})}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Adiciona uma m\'FAsica ao sitema. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C9 solicitado ao usu\'E1rio o nome do artista, bem como o link da m\'FAsica a ser inserida. \'C9 realizado o tratamento das palavras nos nomes e, por fim, o arquivo "Musica_Exemplo.txt" \'E9 atualizado. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i nomeArquivo} \cell }{Nome do arquivo da m\'FAsica. \cell }
{\row }
}
}{
Defini\'E7\'E3o na linha {\b 23} do arquivo {\b musicas.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00023                                                           \{\par
00024     std::map<std::string, std::string> mapa = lerArquivoParaMap(nomeArquivo);\par
00025 \par
00026     std::string artista;\par
00027     std::string musica;\par
00028     std::string link;\par
00029 \par
00030     std::cin.ignore(std::numeric_limits<std::streamsize>::max(), {\cf23 '\\n'});\par
00031     std::cout << {\cf22 "Digite o nome do Artista: "};\par
00032     std::getline(std::cin, artista);\par
00033 \par
00034     std::cout << {\cf22 "Digite o nome da m\'FAsica: "};\par
00035     std::getline(std::cin, musica);\par
00036     \par
00037     std::cout << {\cf22 "Digite o link da m\'FAsica: "};\par
00038     std::getline(std::cin, link);\par
00039     {\cf20 /* trata as palavras. Se o usuario entrar com "bruno mars", }\par
00040 {\cf20     ele transforma para "Bruno Mars"*/}\par
00041     artista = Tratamento_de_Palavras(artista); \par
00042     musica = Tratamento_de_Palavras(musica);\par
00043 \par
00044     mapa.insert(std::make_pair(artista + {\cf22 " - "} + musica, link));\par
00045 \par
00046     std::ofstream arquivo(nomeArquivo);\par
00047     {\cf19 if} (arquivo.is_open()) \{\par
00048         {\cf19 for} ({\cf17 const} {\cf17 auto}& par : mapa) \{\par
00049             arquivo << par.first << {\cf22 ","} << par.second << std::endl;\par
00050         \}\par
00051         arquivo.close();\par
00052         std::cout << {\cf22 "Dados salvos no arquivo."} << std::endl;\par
00053     \} {\cf19 else} \{\par
00054         std::cout << {\cf22 "Nao foi poss\'EDvel abrir o arquivo para escrita."} << std::endl;\par
00055     \}\par
00056 \}\par
}
}
{\xe \v Remove_musica\:Musica}
{\xe \v Musica\:Remove_musica}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Musica::Remove_musica (const std::string &  {\i nomeArquivo})}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove uma m\'FAsica do arquivo. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C9 solicitado ao usu\'E1rio o nome do artista e da m\'FAsica a ser removida e assim uma busca no arquivo "Musica_Exemplo.txt" \'E9 iniciada. Caso encontrada, a m\'FAsica \'E9 exclu\'EDda e o arquivo atualizado.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i nomeArquivo} \cell }{Nome do arquivo da m\'FAsica. \cell }
{\row }
}
}{
Defini\'E7\'E3o na linha {\b 58} do arquivo {\b musicas.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00058                                                       \{\par
00059     std::map<std::string, std::string> mapa = lerArquivoParaMap(nomeArquivo);\par
00060 \par
00061     std::string musica;\par
00062 \par
00063     std::cout << {\cf22 "Digite o nome da musica a ser apagada: "};\par
00064     std::cin.ignore(std::numeric_limits<std::streamsize>::max(), {\cf23 '\\n'});\par
00065     std::getline(std::cin, musica);\par
00066 \par
00067 \par
00068     Pesquisa::Pesquisar amusica(musica);\par
00069     amusica.Encontrar();\par
00070     musica = amusica.Retorno_Pesquisa();\par
00071     {\cf17 auto} it = mapa.find(musica);\par
00072     {\cf19 if} (it != mapa.end()) \{\par
00073         mapa.erase(it);\par
00074         salvarMapEmArquivo(nomeArquivo, mapa);\par
00075         std::cout << {\cf22 "Musica removida com sucesso."} << std::endl;\par
00076     \} {\cf19 else} \{\par
00077         std::cout << {\cf22 "Musica n\'E3o encontrada."} << std::endl;\par
00078     \}\par
00079 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
git hub/Projeto_Stream/{\b musicas.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
git hub/Projeto_Stream/{\b musicas.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe Pesquisa::Pesquisar\par \pard\plain 
{\tc\tcl2 \v Pesquisa::Pesquisar}
{\xe \v Pesquisa::Pesquisar}
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
\par
{
{\f2 #include <pesquisa.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Pesquisar} (std::string palavra)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Pesquisar}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b Encontrar} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Realiza a pesquisa no arquivo, m\'FAsica ou artista. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b confirma_Busca} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Confirma a busca realzada pelo usu\'E1rio. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b Retorno_Pesquisa} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retorna a m\'FAsica e o artista pesquisado. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b reproducao} {\b repro}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Defini\'E7\'E3o na linha {\b 14} do arquivo {\b pesquisa.hpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v Pesquisar\:Pesquisa::Pesquisar}
{\xe \v Pesquisa::Pesquisar\:Pesquisar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Pesquisa::Pesquisar::Pesquisar (std::string  {\i palavra})}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Pesquisar}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i palavra} \cell }{A palavra, m\'FAsica ou artista a ser pesquisada. \cell }
{\row }
}
}{
Defini\'E7\'E3o na linha {\b 3} do arquivo {\b pesquisa.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00003 : _palavra(palavra)\{\}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v confirma_Busca\:Pesquisa::Pesquisar}
{\xe \v Pesquisa::Pesquisar\:confirma_Busca}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Pesquisa::Pesquisar::confirma_Busca ()}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Confirma a busca realzada pelo usu\'E1rio. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Acessa os _resultados definidos pela busca e retorna no m\'E1ximo as as tr\'EAs m\'FAsicas com as sintaxes parecidas, dando o poder de escolha para o usu\'E1rio.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Verdadeiro se ocorreu com sucesso, Falso caso contr\'E1rio. \par
 \par
}}}{
Defini\'E7\'E3o na linha {\b 90} do arquivo {\b pesquisa.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00090                                       \{\par
00091     std::cout << {\cf22 "Voce deseja: "} << std::endl;\par
00092         {\cf18 int} count = 1;\par
00093         {\cf19 for} ({\cf17 auto} it = _resultados.rbegin(); it != _resultados.rend(); ++it) \{\par
00094             {\cf19 if}(it->first != 0)\{                \par
00095                 std::cout << {\cf22 "("} << count << {\cf22 ") "} << it->second << std::endl;\par
00096                 _encontrado[count] = it->second;\par
00097                 count++;\par
00098                 {\cf19 if} (count == 4) \{\par
00099                     {\cf19 break};\par
00100                 \}\par
00101             \}\par
00102         \}\par
00103 \par
00104            \par
00105     {\cf18 int} opcao;\par
00106     {\cf18 bool} encontrado = {\cf17 false};\par
00107 \par
00108     std::cout << {\cf22 "Digite o numero desejado"} << std::endl;\par
00109     {\cf19 while}(encontrado == {\cf17 false})\{\par
00110         std::string opcao_string;\par
00111         std::getline(std::cin, opcao_string); {\cf20 // l\'EF\'BF\'BD a string.}\par
00112 \par
00113         {\cf20 // Verificar se a entrada \'EF\'BF\'BD um n\'EF\'BF\'BDmero inteiro}\par
00114         {\cf19 try} \{\par
00115             opcao = std::stoi(opcao_string);\par
00116         \} \par
00117     \par
00118         {\cf19 catch} (...) \{\par
00119             std::cout << {\cf22 "Entrada invalida. Digite o numero desejado."} << std::endl;\par
00120             {\cf19 continue};\par
00121         \}\par
00122         {\cf19 for} ({\cf17 auto} it = _encontrado.begin(); it != _encontrado.end(); it++)\{\par
00123             {\cf19 if}(opcao == it->first)\{\par
00124                 std::cout << {\cf22 "Voce escolheu: "} << it->second << std::endl;\par
00125                 encontrado = {\cf17 true};\par
00126                 _musica_escolhida = it->second;\par
00127                 \par
00128                 {\cf19 break};\par
00129             \}\par
00130         \par
00131         \}\par
00132 \par
00133     \}\par
00134 \par
00135 {\cf19 return} {\cf17 true};\par
00136 \}\par
}
}
{\xe \v Encontrar\:Pesquisa::Pesquisar}
{\xe \v Pesquisa::Pesquisar\:Encontrar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Pesquisa::Pesquisar::Encontrar ()}}
\par
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Realiza a pesquisa no arquivo, m\'FAsica ou artista. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Realiza a pesquisa atrav\'E9s do arquivo "Musica_Exemplo.txt" com a finalidade de encontrar a maior ocorrencia da palavra passada e assim retornar um boleano para a continua\'E7\'E3o do c\'F3digo.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Verdadeiro se a pesquisa foi um sucesso, Falso caso contr\'E1rio. \par
}}}{
Defini\'E7\'E3o na linha {\b 5} do arquivo {\b pesquisa.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00005                                   \{\par
00006     \par
00007     {\cf19 if}(!_palavra.empty())\{\par
00008         _palavra[0] = std::toupper(_palavra[0]);\par
00009         {\cf19 for}({\cf18 unsigned} i=1; i < _palavra.size(); i++)\{\par
00010             {\cf19 if} (_palavra[i-1] == {\cf23 ' '}) \{\par
00011             _palavra[i] = std::toupper(_palavra[i]);\par
00012             \}{\cf19 else}\{\par
00013             _palavra[i] = std::tolower(_palavra[i]);\par
00014             \}\par
00015 \par
00016         \}\par
00017     \}{\cf20 // Converte pra minuscula e as iniciais em maiusculo}\par
00018 \par
00019     std::ifstream Musica_Exemplo({\cf22 "Musica_Exemplo.txt"});\par
00020     std::string linha;\par
00021 \par
00022     {\cf19 if} (Musica_Exemplo.is_open()) \{\par
00023     \}\par
00024     {\cf19 else} \{\par
00025         std::cout << {\cf22 "Nao foi possivel abrir o arquivo.txt"} << std::endl;\par
00026     \par
00027     \}{\cf20 //abrindo o arquivo.}\par
00028 \par
00029    {\cf19 while} (getline(Musica_Exemplo, linha)) \{\par
00030         std::size_t pos = linha.find({\cf22 ","});\par
00031         {\cf19 if} (pos != std::string::npos) \{\par
00032             std::string titulo = linha.substr(0, pos);\par
00033             \par
00034             std::vector<std::string> palavras_subdivididas;\par
00035             std::string palavra;\par
00036             std::istringstream iss(_palavra);\par
00037 \par
00038             {\cf19 while} (iss >> palavra) \{\par
00039                 palavras_subdivididas.push_back(palavra);\par
00040             \}\par
00041             {\cf18 int} contador_de_palavras=0;\par
00042             {\cf18 unsigned} i=0;\par
00043 \par
00044             {\cf19 while} (i < palavras_subdivididas.size())\{\par
00045 \par
00046                 {\cf19 if} (titulo.find(palavras_subdivididas[i]) != std::string::npos) \{\par
00047                     contador_de_palavras++;\par
00048                 \}\par
00049 \par
00050             i++;    \par
00051             \}\par
00052             _resultados.insert(std::make_pair(contador_de_palavras, titulo));\par
00053         \}\par
00054         \par
00055     \}\par
00056 \par
00057     {\cf20 //1\'EF\'BF\'BD obtenho cada linha e guardo em _linha, depois encntro a 1 ocorrencia que seria no caso de copiar toda a string}\par
00058     {\cf20 //antes do link(ou seja a substring), pois n\'EF\'BF\'BDo quero exibir isso para o usuario. Logo ap\'EF\'BF\'BDs eu encontro dentro dessa substring}\par
00059     {\cf20 //a palavra "_palavra" e assim guardo em _resultados.}\par
00060     {\cf19 for} ({\cf17 auto}& pair : _resultados) \{\par
00061         std::string& value = pair.second;\par
00062         {\cf19 if} (!value.empty()) \{\par
00063             value[0] = std::toupper(value[0]);\par
00064             {\cf19 for} ({\cf18 size_t} i = 1; i < value.size(); i++) \{\par
00065                 {\cf19 if} (value[i - 1] == {\cf23 ' '}) \{\par
00066                     value[i] = std::toupper(value[i]);\par
00067                 \}\par
00068             \}\par
00069         \}\par
00070     \}\par
00071     {\cf20 //converto tudo que esta depois do espa\'EF\'BF\'BDo para letra maiuscula.}\par
00072 \par
00073     {\cf18 bool} encontrouResultados = {\cf17 false};\par
00074     {\cf19 for} ({\cf17 const} {\cf17 auto}& pair : _resultados) \{\par
00075         {\cf19 if} (pair.first > 0) \{\par
00076             encontrouResultados = {\cf17 true};\par
00077             {\cf19 break};\par
00078         \}\par
00079     \}\par
00080 \par
00081     {\cf19 if} (!encontrouResultados) \{\par
00082         std::cout << {\cf22 "Nenhum resultado encontrado para: "} << _palavra << std::endl;\par
00083         {\cf19 return} {\cf17 false};\par
00084     \}\par
00085     {\cf19 else}\{\par
00086         {\cf19 return} confirma_Busca();\par
00087     \}\par
00088 \}\par
}
}
{\xe \v Retorno_Pesquisa\:Pesquisa::Pesquisar}
{\xe \v Pesquisa::Pesquisar\:Retorno_Pesquisa}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Pesquisa::Pesquisar::Retorno_Pesquisa ()}}
\par
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retorna a m\'FAsica e o artista pesquisado. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A m\'FAsica e o artista. \par
}}}{
Defini\'E7\'E3o na linha {\b 138} do arquivo {\b pesquisa.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00138                                              \{\par
00139     {\cf19 return} _musica_escolhida;\par
00140 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v repro\:Pesquisa::Pesquisar}
{\xe \v Pesquisa::Pesquisar\:repro}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b reproducao} Pesquisa::Pesquisar::repro}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Inst\'E2ncia da classe reprodu\'E7\'E3o para que a musica_escolhida possa ser reproduzida. \par
}{
Defini\'E7\'E3o na linha {\b 44} do arquivo {\b pesquisa.hpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
git hub/Projeto_Stream/{\b pesquisa.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
git hub/Projeto_Stream/{\b pesquisa.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe reproducao\par \pard\plain 
{\tc\tcl2 \v reproducao}
{\xe \v reproducao}
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe respons\'E1vel pela reprodu\'E7\'E3o das m\'FAsicas. }}\par
{
{\f2 #include <reproducao.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b reproducao} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Executar} (const std::string &nomeArquivo, std::string nome_musica)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Inicia a reprodu\'E7\'E3o de uma m\'FAsica. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Parar_Executar} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrompe a m\'FAsica em execu\'E7\'E3o. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Pular_p_frente} (const std::string &nomeArquivo)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Pula a m\'FAsica atual para a pr\'F3xima. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Pular_p_tras} (const std::string &nomeArquivo)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Pula a m\'FAsica atual para a anterior. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Encerrar} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Encerra a repodu\'E7\'E3o. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b Retornar_nome} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retorna o nome da m\'FAsica em reprodu\'E7\'E3o. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe respons\'E1vel pela reprodu\'E7\'E3o das m\'FAsicas. \par
}{
Defini\'E7\'E3o na linha {\b 14} do arquivo {\b reproducao.hpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v reproducao\:reproducao}
{\xe \v reproducao\:reproducao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
reproducao::reproducao ()}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 3} do arquivo {\b reproducao.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00003                        : posicaoAtual(-1)\par
00004 \{\par
00005 \par
00006 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v Encerrar\:reproducao}
{\xe \v reproducao\:Encerrar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void reproducao::Encerrar ()}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Encerra a repodu\'E7\'E3o. }}\par
{
Defini\'E7\'E3o na linha {\b 206} do arquivo {\b reproducao.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00207 \{\par
00208     {\cf20 /*Enumerar todas as janelas abertas*/}\par
00209     EnumWindows(EnumWindowsCallback, 0);\par
00210 \}\par
}
}
{\xe \v Executar\:reproducao}
{\xe \v reproducao\:Executar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void reproducao::Executar (const std::string &  {\i nomeArquivo}, std::string  {\i nome_musica})}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Inicia a reprodu\'E7\'E3o de uma m\'FAsica. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i nomeArquivo} \cell }{"Musica_Exemplo.txt" onde h\'E1 o map das m\'FAsicas e links. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i nome_musica} \cell }{Nome da m\'FAsica a ser reproduzida. \cell }
{\row }
}
}{
Defini\'E7\'E3o na linha {\b 8} do arquivo {\b reproducao.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00009 \{\par
00010     std::map<std::string, std::string> mapa2 = ler_arquivo_em_map(nomeArquivo);\par
00011 \par
00012     std::string musica;\par
00013 \par
00014     std::cout << {\cf22 "sua musica esta sendo buscada"} << std::endl;\par
00015     Sleep(5000);\par
00016 \par
00017     {\cf17 auto} it = mapa2.find(nome_musica);\par
00018     {\cf19 if} (it != mapa2.end())\par
00019     \{\par
00020         std::string link = it->second;\par
00021         std::string musica = it->first;\par
00022         _musica_escolhida = musica;\par
00023         std::cout << {\cf22 "Abrindo musica: "} << musica << std::endl;\par
00024 \par
00025         {\cf20 /*Converter a string para o tipo LPCWSTR*/}\par
00026         std::wstring linkWide(link.begin(), link.end());\par
00027         LPCWSTR linkLpcwstr = linkWide.c_str();\par
00028 \par
00029         {\cf20 /*Abrir o link da musica usando o ShellExecute*/}\par
00030         ShellExecute(NULL, L{\cf22 "open"}, linkLpcwstr, NULL, NULL, SW_SHOWNORMAL);\par
00031 \par
00032         {\cf20 /*Atualizar a posicao atual para a posicao do link executado*/}\par
00033         posicaoAtual = std::distance(mapa2.begin(), it);\par
00034     \}\par
00035     {\cf19 else}\par
00036     \{\par
00037         std::cout << {\cf22 "Musica nao encontrada."} << std::endl;\par
00038     \}\par
00039 \}\par
}
}
{\xe \v Parar_Executar\:reproducao}
{\xe \v reproducao\:Parar_Executar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void reproducao::Parar_Executar ()}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interrompe a m\'FAsica em execu\'E7\'E3o. }}\par
{
Defini\'E7\'E3o na linha {\b 41} do arquivo {\b reproducao.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00042 \{\par
00043     pressionar(VK_MEDIA_PLAY_PAUSE);\par
00044     soltar(VK_MEDIA_PLAY_PAUSE);\par
00045 \}\par
}
}
{\xe \v Pular_p_frente\:reproducao}
{\xe \v reproducao\:Pular_p_frente}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void reproducao::Pular_p_frente (const std::string &  {\i nomeArquivo})}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Pula a m\'FAsica atual para a pr\'F3xima. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i nomeArquivo} \cell }{Arquivo "Musica_Exemplo.txt". \cell }
{\row }
}
}{
Defini\'E7\'E3o na linha {\b 50} do arquivo {\b reproducao.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00050                                                             \{\par
00051 \par
00052     {\cf20 /*Fechar o navegador*/}\par
00053     Encerrar();\par
00054 \par
00055     std::map<std::string, std::string> mapa2 = ler_arquivo_em_map(nomeArquivo);\par
00056 \par
00057     {\cf19 if} (posicaoAtual >= 0 && posicaoAtual < mapa2.size() - 1) \{\par
00058         {\cf17 auto} it = mapa2.begin();\par
00059         std::advance(it, posicaoAtual + 1);\par
00060         std::string link = it->second;\par
00061         _musica_escolhida = it->first;\par
00062         std::cout << {\cf22 "Pulando para o musica posterior: "} << it->first << std::endl;\par
00063 \par
00064         Sleep(5000);\par
00065 \par
00066         {\cf20 /*Converter a string para o tipo LPCWSTR*/}\par
00067         std::wstring linkWide(link.begin(), link.end());\par
00068         LPCWSTR linkLpcwstr = linkWide.c_str();\par
00069 \par
00070         {\cf20 /*Abrir o link da musica usando o ShellExecuteEx*/}\par
00071         SHELLEXECUTEINFO sei;\par
00072         ZeroMemory(&sei, {\cf17 sizeof}(sei));\par
00073         sei.cbSize = {\cf17 sizeof}(sei);\par
00074         sei.fMask = SEE_MASK_FLAG_DDEWAIT | SEE_MASK_FLAG_NO_UI;\par
00075         sei.lpVerb = L{\cf22 "open"};\par
00076         sei.lpFile = linkLpcwstr;\par
00077         sei.nShow = SW_SHOWNORMAL;\par
00078 \par
00079         {\cf19 if} (ShellExecuteEx(&sei)) \{\par
00080             {\cf20 /*Atualizar a posicao atual para a posicao do link posterior*/}\par
00081             posicaoAtual = std::distance(mapa2.begin(), it);\par
00082         \} {\cf19 else} \{\par
00083             std::cout << {\cf22 "Nao foi possivel abrir o link."} << std::endl;\par
00084         \}\par
00085     \} {\cf19 else} \{\par
00086         std::cout << {\cf22 "Nao ha link posterior disponivel."} << std::endl;\par
00087     \}\par
00088 \}\par
}
}
{\xe \v Pular_p_tras\:reproducao}
{\xe \v reproducao\:Pular_p_tras}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void reproducao::Pular_p_tras (const std::string &  {\i nomeArquivo})}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Pula a m\'FAsica atual para a anterior. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i nomeArquivo} \cell }{Arquivo "Musica_Exemplo.txt". \cell }
{\row }
}
}{
Defini\'E7\'E3o na linha {\b 90} do arquivo {\b reproducao.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00090                                                           \{\par
00091 \par
00092     {\cf20 /*Fechar o navegador*/}\par
00093     Encerrar();\par
00094     std::map<std::string, std::string> mapa2 = ler_arquivo_em_map(nomeArquivo);\par
00095 \par
00096     {\cf19 if} (posicaoAtual > 0 && posicaoAtual < mapa2.size()) \{\par
00097         {\cf17 auto} it = mapa2.begin();\par
00098         std::advance(it, posicaoAtual - 1);\par
00099         std::string link = it->second;\par
00100         std::string musica = it->first;\par
00101         std::cout << {\cf22 "Pulando para o muscia anterior: "} << musica << std::endl;\par
00102         _musica_escolhida = it->first;\par
00103         Sleep(5000);\par
00104 \par
00105         {\cf20 /*Converter a string para o tipo LPCWSTR*/}\par
00106         std::wstring linkWide(link.begin(), link.end());\par
00107         LPCWSTR linkLpcwstr = linkWide.c_str();\par
00108 \par
00109         {\cf20 /*Abrir o link da musica anterior usando o ShellExecuteEx*/}\par
00110         SHELLEXECUTEINFO sei;\par
00111         ZeroMemory(&sei, {\cf17 sizeof}(sei));\par
00112         sei.cbSize = {\cf17 sizeof}(sei);\par
00113         sei.fMask = SEE_MASK_FLAG_DDEWAIT | SEE_MASK_FLAG_NO_UI;\par
00114         sei.lpVerb = L{\cf22 "open"};\par
00115         sei.lpFile = linkLpcwstr;\par
00116         sei.nShow = SW_SHOWNORMAL;\par
00117 \par
00118         {\cf19 if} (ShellExecuteEx(&sei)) \{\par
00119             {\cf20 /*Atualizar a posicao atual para a posicao do link anterior*/}\par
00120             posicaoAtual = std::distance(mapa2.begin(), it);\par
00121         \} {\cf19 else} \{\par
00122             std::cout << {\cf22 "Nao foi possivel abrir o link."} << std::endl;\par
00123         \}\par
00124     \} {\cf19 else} \{\par
00125         std::cout << {\cf22 "Nao ha link anterior disponivel."} << std::endl;\par
00126     \}\par
00127 \}\par
}
}
{\xe \v Retornar_nome\:reproducao}
{\xe \v reproducao\:Retornar_nome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string reproducao::Retornar_nome ()}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retorna o nome da m\'FAsica em reprodu\'E7\'E3o. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Nome da m\'FAsica escolhida. \par
}}}{
Defini\'E7\'E3o na linha {\b 47} do arquivo {\b reproducao.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00047                                    \{\par
00048     {\cf19 return} _musica_escolhida;\par
00049 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
git hub/Projeto_Stream/{\b reproducao.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
git hub/Projeto_Stream/{\b reproducao.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe Signup\par \pard\plain 
{\tc\tcl2 \v Signup}
{\xe \v Signup}
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
\par
{
{\f2 #include <cadastrousuario.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b sign_up} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cadastra uma nova conta de usu\'E1rio. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Defini\'E7\'E3o na linha {\b 32} do arquivo {\b cadastrousuario.hpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v sign_up\:Signup}
{\xe \v Signup\:sign_up}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Signup::sign_up ()}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cadastra uma nova conta de usu\'E1rio. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Solicita um nome de usu\'E1rio e uma senha, verifica se o usu\'E1rio j\'E1 existe no arquivo "usuariosenha.txt" e, em seguida, armazena as informa\'E7\'F5es no pr\'F3prio arquivo, caso sejam v\'E1lidas. \par
}{
Defini\'E7\'E3o na linha {\b 83} do arquivo {\b cadastrousuario.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00083                      \{\par
00084     std::string usuario, senha, senhac;\par
00085 \par
00086     std::cout << {\cf22 "Digite aqui o nome de usuario: "};\par
00087     getline(std::cin, usuario);\par
00088     std::cout << std::endl;\par
00089 \par
00090     {\cf20 /*Verifica se o campo do nome de usu\'E1rio est\'E1 vazio*/} \par
00091     {\cf19 while} (usuario.empty()) \{\par
00092         std::cout << {\cf22 "Campo de nome de usuario vazio!"} << std::endl;\par
00093         std::cout << {\cf22 "Digite o nome de usuario novamente: "};\par
00094         getline(std::cin, usuario);\par
00095         std::cout << std::endl;\par
00096     \}\par
00097 \par
00098     std::ifstream usuariosarq1({\cf22 "usuariosenha.txt"});\par
00099     {\cf19 if} (usuariosarq1.is_open()) \{\par
00100         std::string teste;\par
00101         {\cf18 bool} usuarioExistente = {\cf17 false};\par
00102 \par
00103         {\cf19 while} (getline(usuariosarq1, teste)) \{\par
00104             {\cf19 if} (teste == usuario) \{\par
00105                 usuarioExistente = {\cf17 true};\par
00106                 {\cf19 break};\par
00107             \}\par
00108         \}\par
00109         usuariosarq1.close();\par
00110 \par
00111         {\cf20 /*Solicita outro nome de usu\'E1rio*/} \par
00112         {\cf19 while} (usuarioExistente) \{\par
00113             std::cout << {\cf22 "Usuario ja existente!"} << std::endl;\par
00114             std::cout << {\cf22 "Digite outro nome de usuario: "};\par
00115             getline(std::cin, usuario);\par
00116             std::cout << std::endl;\par
00117 \par
00118             usuariosarq1.open({\cf22 "usuariosenha.txt"});\par
00119             usuarioExistente = {\cf17 false};\par
00120 \par
00121             {\cf19 while} (getline(usuariosarq1, teste)) \{\par
00122                 {\cf19 if} (teste == usuario) \{\par
00123                     usuarioExistente = {\cf17 true};\par
00124                     {\cf19 break};\par
00125                 \}\par
00126             \}\par
00127             usuariosarq1.close();\par
00128         \}\par
00129     \}\par
00130 \par
00131     std::cout << {\cf22 "Digite aqui a senha: "};\par
00132     getline(std::cin, senha);\par
00133     std::cout << std::endl;\par
00134 \par
00135     {\cf20 /*Verifica se o campo de senha est\'E1 vazio*/} \par
00136     {\cf19 while} (senha.empty()) \{\par
00137         std::cout << {\cf22 "Campo de senha vazio!"} << std::endl;\par
00138         std::cout << {\cf22 "Digite a senha novamente: "};\par
00139         getline(std::cin, senha);\par
00140         std::cout << std::endl;\par
00141     \}\par
00142 \par
00143     std::cout << {\cf22 "Digite novamente para confirmar a senha: "};\par
00144     getline(std::cin, senhac);\par
00145     std::cout << std::endl;\par
00146 \par
00147     {\cf20 /*Verifica se o campo de confirma\'E7\'E3o de senha est\'E1 vazio*/}\par
00148     {\cf19 while} (senhac.empty()) \{\par
00149         std::cout << {\cf22 "Campo de confirmacao de senha vazio!"} << std::endl;\par
00150         std::cout << {\cf22 "Digite novamente para confirmar a senha: "};\par
00151         getline(std::cin, senhac);\par
00152         std::cout << std::endl;\par
00153     \}\par
00154 \par
00155     {\cf19 while} (senhac != senha) \{\par
00156         std::cout << {\cf22 "Senhas diferentes"} << std::endl;\par
00157         std::cout << {\cf22 "Digite novamente para confirmar a senha: "};\par
00158         getline(std::cin, senhac);\par
00159         std::cout << std::endl;\par
00160     \}\par
00161 \par
00162     std::ofstream usuariosarq2({\cf22 "usuariosenha.txt"}, std::ios::app);\par
00163     usuariosarq2 << usuario << {\cf22 "\\n"} << hashSenha(senha) << {\cf22 "\\n"};\par
00164     usuariosarq2.close();\par
00165 \par
00166     std::cout << {\cf22 "USUARIO CRIADO COM SUCESSO!"} << std::endl;\par
00167     std::cout << std::endl;\par
00168 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
git hub/Projeto_Stream/{\b cadastrousuario.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
git hub/Projeto_Stream/{\b cadastrousuario.cpp}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Arquivos{\tc \v Arquivos}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo git hub/Projeto_Stream/cadastrousuario.cpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/cadastrousuario.cpp}
{\xe \v git hub/Projeto_Stream/cadastrousuario.cpp}
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "cadastrousuario.hpp"}\par
{\f2 #include <iostream>}\par
{\f2 #include <fstream>}\par
{\f2 #include <string>}\par
{\f2 #include <limits>}\par
{\f2 #include <algorithm>}\par
{\f2 #include <vector>}\par
{\f2 #include <map>}\par
{\f2 #include <functional>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b hashSenha} (const std::string &senha)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o de hash b\'E1sica para criptografar as senhas. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v hashSenha\:cadastrousuario.cpp}
{\xe \v cadastrousuario.cpp\:hashSenha}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string hashSenha (const std::string &  {\i senha})}}
\par
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o de hash b\'E1sica para criptografar as senhas. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i senha} \cell }{A senha a ser criptografada. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A senha criptografada. \par
}}}{
Defini\'E7\'E3o na linha {\b 13} do arquivo {\b cadastrousuario.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00013                                             \{\par
00014     std::hash<std::string> hashFunc;\par
00015     {\cf19 return} std::to_string(hashFunc(senha));\par
00016 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cadastrousuario.cpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/cadastrousuario.cpp}
{\xe \v git hub/Projeto_Stream/cadastrousuario.cpp}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Ir para a documenta\'E7\'E3o desse arquivo.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "cadastrousuario.hpp"}\par
00002 {\cf21 #include <iostream>}\par
00003 {\cf21 #include <fstream>}\par
00004 {\cf21 #include <string>}\par
00005 {\cf21 #include <limits>}\par
00006 {\cf21 #include <algorithm>}\par
00007 {\cf21 #include <vector>}\par
00008 {\cf21 #include <map>}\par
00009 {\cf21 #include <functional>}\par
00010 \par
00011 \par
00012 {\cf20 /*Fun\'E7\'E3o de hash b\'E1sica para criptografar as senhas*/}\par
00013 std::string hashSenha({\cf17 const} std::string& senha) \{\par
00014     std::hash<std::string> hashFunc;\par
00015     {\cf19 return} std::to_string(hashFunc(senha));\par
00016 \}\par
00017 \par
00018 {\cf20 /* Este m\'E9todo \'E9 respons\'E1vel por realizar o login de um usu\'E1rio. }\par
00019 {\cf20 Ele solicita o nome de usu\'E1rio e a senha, }\par
00020 {\cf20 l\'EA as informa\'E7\'F5es do arquivo "usuariosenha.txt" e verifica se as credenciais est\'E3o corretas.*/}\par
00021 \par
00022 {\cf18 void} Login::login() \{\par
00023 \par
00024     std::string usuario, senha, testeusuario, testesenha;\par
00025     \par
00026 \par
00027     std::ifstream confirma({\cf22 "usuariosenha.txt"});\par
00028 \par
00029     {\cf19 if} (confirma.is_open()) \{\par
00030         {\cf18 bool} usuarioEncontrado = {\cf17 false};\par
00031         {\cf18 bool} loginBemSucedido = {\cf17 false};\par
00032 \par
00033         {\cf19 while} (!loginBemSucedido) \{\par
00034             usuarioEncontrado = {\cf17 false};\par
00035             std::cout << {\cf22 "Digite aqui o nome de usuario: "};\par
00036             getline(std::cin, usuario);\par
00037             std::cout << std::endl;\par
00038 \par
00039             {\cf19 while} (getline(confirma, testeusuario)) \{\par
00040                 {\cf19 if} (usuario == testeusuario) \{\par
00041                     usuarioEncontrado = {\cf17 true};\par
00042                     getline(confirma, testesenha);\par
00043                     {\cf19 break};\par
00044                 \}\par
00045                 getline(confirma, testesenha);  {\cf20 /*Descarta a linha da senha correspondente*/}\par
00046             \}\par
00047 \par
00048             {\cf19 if} (usuarioEncontrado) \{\par
00049                 std::cout << {\cf22 "Digite aqui a senha: "};\par
00050                 getline(std::cin, senha);\par
00051                 std::cout << std::endl;\par
00052 \par
00053                 {\cf19 if} (hashSenha(senha) == testesenha) \{\par
00054                     std::cout << {\cf22 "LOGIN BEM SUCEDIDO!"} << std::endl;\par
00055                     std::cout << std::endl;\par
00056                     loginBemSucedido = {\cf17 true};\par
00057                     _nomedeusuario=usuario;\par
00058                 \} \par
00059                 {\cf19 else} \{\par
00060                     std::cout << {\cf22 "Senha incorreta!"} << std::endl;\par
00061                 \}\par
00062             \}\par
00063             {\cf19 else} \{\par
00064                 std::cout << {\cf22 "Nome de usuario nao encontrado!"} << std::endl;\par
00065             \}\par
00066             confirma.clear();\par
00067             confirma.seekg(0, std::ios::beg);\par
00068         \}\par
00069 \par
00070         confirma.close();\par
00071     \}\par
00072     {\cf19 else} \{\par
00073         std::cout << {\cf22 "Erro ao abrir o arquivo!"} << std::endl;\par
00074     \}\par
00075     \par
00076 \};\par
00077 \par
00078 {\cf20 /* Este m\'E9todo permite que um novo usu\'E1rio crie uma conta. }\par
00079 {\cf20 Ele solicita um nome de usu\'E1rio e uma senha, }\par
00080 {\cf20 verifica se o usu\'E1rio j\'E1 existe no arquivo "usuariosenha.txt" e, }\par
00081 {\cf20 em seguida, armazena as informa\'E7\'F5es no arquivo, caso sejam v\'E1lidas.*/}\par
00082 \par
00083 {\cf18 void} Signup::sign_up() \{\par
00084     std::string usuario, senha, senhac;\par
00085 \par
00086     std::cout << {\cf22 "Digite aqui o nome de usuario: "};\par
00087     getline(std::cin, usuario);\par
00088     std::cout << std::endl;\par
00089 \par
00090     {\cf20 /*Verifica se o campo do nome de usu\'E1rio est\'E1 vazio*/} \par
00091     {\cf19 while} (usuario.empty()) \{\par
00092         std::cout << {\cf22 "Campo de nome de usuario vazio!"} << std::endl;\par
00093         std::cout << {\cf22 "Digite o nome de usuario novamente: "};\par
00094         getline(std::cin, usuario);\par
00095         std::cout << std::endl;\par
00096     \}\par
00097 \par
00098     std::ifstream usuariosarq1({\cf22 "usuariosenha.txt"});\par
00099     {\cf19 if} (usuariosarq1.is_open()) \{\par
00100         std::string teste;\par
00101         {\cf18 bool} usuarioExistente = {\cf17 false};\par
00102 \par
00103         {\cf19 while} (getline(usuariosarq1, teste)) \{\par
00104             {\cf19 if} (teste == usuario) \{\par
00105                 usuarioExistente = {\cf17 true};\par
00106                 {\cf19 break};\par
00107             \}\par
00108         \}\par
00109         usuariosarq1.close();\par
00110 \par
00111         {\cf20 /*Solicita outro nome de usu\'E1rio*/} \par
00112         {\cf19 while} (usuarioExistente) \{\par
00113             std::cout << {\cf22 "Usuario ja existente!"} << std::endl;\par
00114             std::cout << {\cf22 "Digite outro nome de usuario: "};\par
00115             getline(std::cin, usuario);\par
00116             std::cout << std::endl;\par
00117 \par
00118             usuariosarq1.open({\cf22 "usuariosenha.txt"});\par
00119             usuarioExistente = {\cf17 false};\par
00120 \par
00121             {\cf19 while} (getline(usuariosarq1, teste)) \{\par
00122                 {\cf19 if} (teste == usuario) \{\par
00123                     usuarioExistente = {\cf17 true};\par
00124                     {\cf19 break};\par
00125                 \}\par
00126             \}\par
00127             usuariosarq1.close();\par
00128         \}\par
00129     \}\par
00130 \par
00131     std::cout << {\cf22 "Digite aqui a senha: "};\par
00132     getline(std::cin, senha);\par
00133     std::cout << std::endl;\par
00134 \par
00135     {\cf20 /*Verifica se o campo de senha est\'E1 vazio*/} \par
00136     {\cf19 while} (senha.empty()) \{\par
00137         std::cout << {\cf22 "Campo de senha vazio!"} << std::endl;\par
00138         std::cout << {\cf22 "Digite a senha novamente: "};\par
00139         getline(std::cin, senha);\par
00140         std::cout << std::endl;\par
00141     \}\par
00142 \par
00143     std::cout << {\cf22 "Digite novamente para confirmar a senha: "};\par
00144     getline(std::cin, senhac);\par
00145     std::cout << std::endl;\par
00146 \par
00147     {\cf20 /*Verifica se o campo de confirma\'E7\'E3o de senha est\'E1 vazio*/}\par
00148     {\cf19 while} (senhac.empty()) \{\par
00149         std::cout << {\cf22 "Campo de confirmacao de senha vazio!"} << std::endl;\par
00150         std::cout << {\cf22 "Digite novamente para confirmar a senha: "};\par
00151         getline(std::cin, senhac);\par
00152         std::cout << std::endl;\par
00153     \}\par
00154 \par
00155     {\cf19 while} (senhac != senha) \{\par
00156         std::cout << {\cf22 "Senhas diferentes"} << std::endl;\par
00157         std::cout << {\cf22 "Digite novamente para confirmar a senha: "};\par
00158         getline(std::cin, senhac);\par
00159         std::cout << std::endl;\par
00160     \}\par
00161 \par
00162     std::ofstream usuariosarq2({\cf22 "usuariosenha.txt"}, std::ios::app);\par
00163     usuariosarq2 << usuario << {\cf22 "\\n"} << hashSenha(senha) << {\cf22 "\\n"};\par
00164     usuariosarq2.close();\par
00165 \par
00166     std::cout << {\cf22 "USUARIO CRIADO COM SUCESSO!"} << std::endl;\par
00167     std::cout << std::endl;\par
00168 \}\par
00169 \par
00170 \par
00171 \par
00172 \par
00173 {\cf20 /*Permite que o usu\'E1rio altere o nome de usu\'E1rio. }\par
00174 {\cf20 Solicita o nome de usu\'E1rio atual e a senha atual, verifica se as credenciais est\'E3o corretas, }\par
00175 {\cf20 solicita o novo nome de usu\'E1rio e atualiza as informa\'E7\'F5es no arquivo "usuariosenha.txt".*/}\par
00176 \par
00177 \par
00178 {\cf18 void} ChangeUsername::change_username() \{\par
00179     std::string usuario, senha, novoUsuario;\par
00180 \par
00181     std::cout << {\cf22 "Digite o nome de usuario atual: "};\par
00182     getline(std::cin, usuario);\par
00183     std::cout << std::endl;\par
00184 \par
00185     std::cout << {\cf22 "Digite a senha: "};\par
00186     getline(std::cin, senha);\par
00187     std::cout << std::endl;\par
00188 \par
00189     std::ifstream usuariosArquivo({\cf22 "usuariosenha.txt"});\par
00190     {\cf19 if} (usuariosArquivo.is_open()) \{\par
00191         std::string linha;\par
00192         std::vector<std::string> usuarios;\par
00193 \par
00194         {\cf19 while} (getline(usuariosArquivo, linha)) \{\par
00195             usuarios.push_back(linha);\par
00196         \}\par
00197 \par
00198         usuariosArquivo.close();\par
00199 \par
00200         {\cf17 auto} itUsuario = std::find(usuarios.begin(), usuarios.end(), usuario);\par
00201         {\cf17 auto} itSenha = itUsuario;  {\cf20 /*Atualiza para itUsuario*/}\par
00202 \par
00203         {\cf19 if} (itUsuario != usuarios.end() && itSenha != usuarios.end()) \{\par
00204             ++itSenha;  {\cf20 /*Avan\'E7a para a pr\'F3xima linha (senha)*/}\par
00205 \par
00206             {\cf19 if} (*(itSenha) == hashSenha(senha)) \{  {\cf20 /*Verifica a senha original*/}\par
00207                 std::cout << {\cf22 "Digite o novo nome de usuario: "};\par
00208                 getline(std::cin, novoUsuario);\par
00209                 std::cout << std::endl;\par
00210 \par
00211                 {\cf19 while} (std::find(usuarios.begin(), usuarios.end(), novoUsuario) != usuarios.end()) \{\par
00212                     std::cout << {\cf22 "O nome de usuario escolhido ja esta em uso!"} << std::endl;\par
00213                     std::cout << {\cf22 "Digite outro novo nome de usuario: "};\par
00214                     getline(std::cin, novoUsuario);\par
00215                     std::cout << std::endl;\par
00216                 \}\par
00217 \par
00218                 *itUsuario = novoUsuario;\par
00219 \par
00220                 std::ofstream usuariosArquivo({\cf22 "usuariosenha.txt"}, std::ios::trunc);\par
00221                 {\cf19 if} (usuariosArquivo.is_open()) \{\par
00222                     {\cf19 for} ({\cf17 const} std::string& u : usuarios) \{\par
00223                         usuariosArquivo << u << {\cf23 '\\n'};\par
00224                     \}\par
00225                     usuariosArquivo.close();\par
00226 \par
00227                     std::cout << {\cf22 "Nome de usuario alterado com sucesso!"} << std::endl;\par
00228                 \} {\cf19 else} \{\par
00229                     std::cout << {\cf22 "Erro ao abrir o arquivo de usuarios!"} << std::endl;\par
00230                 \}\par
00231             \} {\cf19 else} \{\par
00232                 std::cout << {\cf22 "Senha incorreta!"} << std::endl;\par
00233             \}\par
00234         \} {\cf19 else} \{\par
00235             std::cout << {\cf22 "Nome de usuario nao encontrado!"} << std::endl;\par
00236         \}\par
00237     \} {\cf19 else} \{\par
00238         std::cout << {\cf22 "Erro ao abrir o arquivo de usuarios!"} << std::endl;\par
00239     \}\par
00240 \}\par
00241 \par
00242 \par
00243 {\cf18 void} DeleteAccount::delete_account() \{\par
00244     std::string usuario, senha;\par
00245 \par
00246     std::cout << {\cf22 "Digite o nome de usuario: "};\par
00247     getline(std::cin, usuario);\par
00248     std::cout << std::endl;\par
00249 \par
00250     std::cout << {\cf22 "Digite a senha: "};\par
00251     getline(std::cin, senha);\par
00252     std::cout << std::endl;\par
00253 \par
00254     {\cf19 if} (verificar_credenciais(usuario, senha)) \{\par
00255         {\cf19 if} (verificar_existencia_usuario(usuario)) \{\par
00256             delete_account(usuario);\par
00257         \} {\cf19 else} \{\par
00258             std::cout << {\cf22 "A conta que deseja excluir nao existe."} << std::endl;\par
00259         \}\par
00260     \} {\cf19 else} \{\par
00261         std::cout << {\cf22 "Credenciais invalidas. Nao foi possivel apagar a conta."} << std::endl;\par
00262     \}\par
00263 \}\par
00264 \par
00265 \par
00266 \par
00267 {\cf18 bool} DeleteAccount::verificar_credenciais({\cf17 const} std::string& usuario, {\cf17 const} std::string& senha) \{\par
00268     std::ifstream usuariosArquivo({\cf22 "usuariosenha.txt"});\par
00269     {\cf19 if} (usuariosArquivo.is_open()) \{\par
00270         std::string testeusuario, testesenha;\par
00271 \par
00272         {\cf19 while} (getline(usuariosArquivo, testeusuario)) \{\par
00273             {\cf19 if} (usuario == testeusuario) \{\par
00274                 getline(usuariosArquivo, testesenha);\par
00275                 {\cf19 break};\par
00276             \}\par
00277             getline(usuariosArquivo, testesenha);  {\cf20 /*Descarta a linha da senha correspondente*/}\par
00278         \}\par
00279 \par
00280         usuariosArquivo.close();\par
00281 \par
00282         {\cf20 /*Verifica se o usu\'E1rio foi encontrado e se a senha corresponde*/}\par
00283         {\cf19 if} (!testesenha.empty() && hashSenha(senha) == testesenha) \{\par
00284             {\cf19 return} {\cf17 true};\par
00285         \}\par
00286     \}\par
00287 \par
00288     {\cf19 return} {\cf17 false};\par
00289 \}\par
00290 \par
00291 \par
00292 {\cf18 void} DeleteAccount::delete_account({\cf17 const} std::string& usuario) \{\par
00293     std::ifstream usuariosArquivo({\cf22 "usuariosenha.txt"});\par
00294     {\cf19 if} (usuariosArquivo.is_open()) \{\par
00295         std::string linha;\par
00296         std::vector<std::string> usuarios;\par
00297 \par
00298         {\cf19 while} (getline(usuariosArquivo, linha)) \{\par
00299             {\cf19 if} (linha == usuario) \{\par
00300                 getline(usuariosArquivo, linha); \par
00301             \} {\cf19 else} \{\par
00302                 usuarios.push_back(linha);\par
00303             \}\par
00304         \}\par
00305 \par
00306         usuariosArquivo.close();\par
00307 \par
00308         std::ofstream usuariosArquivoOut({\cf22 "usuariosenha.txt"}, std::ios::trunc);\par
00309         {\cf19 if} (usuariosArquivoOut.is_open()) \{\par
00310             {\cf19 for} ({\cf17 const} std::string& u : usuarios) \{\par
00311                 usuariosArquivoOut << u << {\cf23 '\\n'};\par
00312             \}\par
00313             usuariosArquivoOut.close();\par
00314 \par
00315             std::cout << {\cf22 "Conta do usuario "} << usuario << {\cf22 " apagada com sucesso!"} << std::endl;\par
00316             {\cf19 return}; {\cf20 /*Retornar ap\'F3s a exclus\'E3o bem-sucedida*/}\par
00317         \} {\cf19 else} \{\par
00318             std::cout << {\cf22 "Erro ao abrir o arquivo de usuarios!"} << std::endl;\par
00319         \}\par
00320     \} {\cf19 else} \{\par
00321         std::cout << {\cf22 "Erro ao abrir o arquivo de usu\'E1rios!"} << std::endl;\par
00322     \}\par
00323 \}\par
00324 \par
00325 \par
00326 {\cf18 bool} DeleteAccount::verificar_existencia_usuario({\cf17 const} std::string& usuario) \{\par
00327     std::ifstream usuariosArquivo({\cf22 "usuariosenha.txt"});\par
00328     {\cf19 if} (usuariosArquivo.is_open()) \{\par
00329         std::string testeusuario;\par
00330 \par
00331         {\cf19 while} (getline(usuariosArquivo, testeusuario)) \{\par
00332             {\cf19 if} (usuario == testeusuario) \{\par
00333                 usuariosArquivo.close();\par
00334                 {\cf19 return} {\cf17 true};\par
00335             \}\par
00336             getline(usuariosArquivo, testeusuario);  {\cf20 /*Descarta a linha da senha correspondente*/}\par
00337         \}\par
00338 \par
00339         usuariosArquivo.close();\par
00340     \}\par
00341 \par
00342     {\cf19 return} {\cf17 false};\par
00343 \}\par
00344 \par
00345 \par
00346 \par
00347 \par
00348 \par
00349 \par
00350 {\cf20 /*Este m\'E9todo inicia o aplicativo. }\par
00351 {\cf20 Ele chama o m\'E9todo exibirlogo() para exibir o logotipo*/} \par
00352 \par
00353 {\cf18 void} Iniciar::exibirlogo() \{\par
00354     std::cout << {\cf22 "==============================="} << std::endl;\par
00355     std::cout << {\cf22 "           PANCADAO            "} << std::endl;\par
00356     std::cout << {\cf22 "==============================="} << std::endl;\par
00357     std::cout << std::endl;\par
00358     std::cout << std::endl;\par
00359 \}\par
00360 \par
00361 std::string  Login::getternomedeusuario()\{\par
00362     {\cf19 return} _nomedeusuario;\par
00363 \}\par
00364 \par
00365 \par
00366 \par
00367 {\cf20 /*Este m\'E9todo exibe um menu para o usu\'E1rio, }\par
00368 {\cf20 onde ele pode escolher entre fazer o login (utilizando a classe Login) }\par
00369 {\cf20 ou realizar o cadastro (utilizando a classe Signup).*/}\par
00370 \par
00371 std::string Iniciar::menu() \{\par
00372 \par
00373 {\cf19 while}({\cf17 true})\{\par
00374     std::cout << {\cf22 "Entre agora no melhor app de musica"} << std::endl;\par
00375     std::cout << std::endl;\par
00376     std::cout << {\cf22 "Digite 1, 2, 3 ou 4 para escolher uma opcao: "} << std::endl;\par
00377     std::cout << {\cf22 "1. Sign_up"} << std::endl;\par
00378     std::cout << {\cf22 "2. Login"} << std::endl;\par
00379     std::cout << {\cf22 "3. Trocar nome de usuario"} << std::endl;\par
00380     std::cout << {\cf22 "4. Apagar conta de usuario"} << std::endl;\par
00381    \par
00382 \par
00383    \par
00384 \par
00385    {\cf18 int} opcao = 0;\par
00386     {\cf19 while} ({\cf17 true}) \{\par
00387         {\cf19 if} (!(std::cin >> opcao) || (opcao != 1 && opcao != 2 && opcao != 3 && opcao != 4)) \{\par
00388             std::cout << {\cf22 "Opcao invalida!!"}<< std::endl;\par
00389             std::cout << {\cf22 "Digite (1) para sign_up, (2) para login, (3) para mudar o nome de usuario ou (4) para apagar conta de usuario: "}<< std::endl;\par
00390 \par
00391             std::cin.clear();\par
00392             std::cin.ignore(std::numeric_limits<std::streamsize>::max(), {\cf23 '\\n'});\par
00393         \} {\cf19 else} \{\par
00394             {\cf19 break};\par
00395         \}\par
00396     \}\par
00397     std::cin.ignore();\par
00398 \par
00399 \par
00400     {\cf19 if} (opcao == 1) \{\par
00401         Signup fazer;\par
00402         fazer.sign_up();\par
00403     \}\par
00404     {\cf19 else} {\cf19 if} (opcao == 2) \{\par
00405         std::string retorno;\par
00406         Login fazer;\par
00407         fazer.login();\par
00408         retorno = fazer.getternomedeusuario();\par
00409         {\cf19 return} retorno;\par
00410         {\cf19 break};\par
00411     \}\par
00412     {\cf19 else} {\cf19 if} (opcao == 3) \{\par
00413         ChangeUsername fazer;\par
00414         fazer.change_username();\par
00415     \}\par
00416     {\cf19 else} {\cf19 if} (opcao == 4) \{\par
00417         DeleteAccount fazer;\par
00418         fazer.delete_account();\par
00419     \}\par
00420 \}\par
00421 \};\par
00422 \par
00423 \par
00424 \par
00425 \par
00426 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo git hub/Projeto_Stream/cadastrousuario.hpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/cadastrousuario.hpp}
{\xe \v git hub/Projeto_Stream/cadastrousuario.hpp}
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include <fstream>}\par
{\f2 #include <string>}\par
{\f2 #include <limits>}\par
{\f2 #include <algorithm>}\par
{\f2 #include <vector>}\par
{\f2 #include <map>}\par
{\f2 #include <functional>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Login}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Signup}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ChangeUsername}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b DeleteAccount}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Iniciar}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b hashSenha} (const std::string &senha)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o de hash b\'E1sica para criptografar as senhas. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v hashSenha\:cadastrousuario.hpp}
{\xe \v cadastrousuario.hpp\:hashSenha}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string hashSenha (const std::string &  {\i senha})}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o de hash b\'E1sica para criptografar as senhas. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i senha} \cell }{A senha a ser criptografada. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A senha criptografada. \par
}}}{
Defini\'E7\'E3o na linha {\b 13} do arquivo {\b cadastrousuario.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00013                                             \{\par
00014     std::hash<std::string> hashFunc;\par
00015     {\cf19 return} std::to_string(hashFunc(senha));\par
00016 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cadastrousuario.hpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/cadastrousuario.hpp}
{\xe \v git hub/Projeto_Stream/cadastrousuario.hpp}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
Ir para a documenta\'E7\'E3o desse arquivo.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #ifndef cadastrousuario_hpp}\par
00002 {\cf21 #define cadastrousuario_hpp}\par
00003 {\cf21 #include <iostream>}\par
00004 {\cf21 #include <fstream>}\par
00005 {\cf21 #include <string>}\par
00006 {\cf21 #include <limits>}\par
00007 {\cf21 #include <algorithm>}\par
00008 {\cf21 #include <vector>}\par
00009 {\cf21 #include <map>}     \par
00010 {\cf21 #include <functional>}\par
00011 \par
00016 std::string hashSenha({\cf17 const} std::string& senha);\par
00017 \par
00018 {\cf17 class }Login \{\par
00019 {\cf17 public}:\par
00025    {\cf18 void} login();\par
00026    std::string getternomedeusuario();\par
00027 \par
00028 {\cf17 private}:\par
00029    std::string _nomedeusuario;\par
00030 \};\par
00031 \par
00032 {\cf17 class }Signup \{\par
00033 {\cf17 public}:\par
00040     {\cf18 void} sign_up();\par
00041 \};\par
00042 \par
00043 {\cf17 class }ChangeUsername \{\par
00044 {\cf17 public}:\par
00051     {\cf18 void} change_username();\par
00052 \};\par
00053 \par
00054 {\cf17 class }DeleteAccount \{\par
00055 {\cf17 public}:\par
00062     {\cf18 void} delete_account();\par
00067     {\cf18 bool} verificar_existencia_usuario({\cf17 const} std::string& usuario);\par
00068 \par
00069 {\cf17 private}:\par
00075     {\cf18 bool} verificar_credenciais({\cf17 const} std::string& usuario, {\cf17 const} std::string& senha);\par
00079     {\cf18 void} delete_account({\cf17 const} std::string& usuario);\par
00080 \};\par
00081 \par
00082 {\cf17 class }Iniciar \{\par
00083 {\cf17 public}:\par
00085     {\cf18 void} exibirlogo();\par
00092     std::string menu(); \par
00093 \};\par
00094 \par
00095 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo git hub/Projeto_Stream/feedback.cpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/feedback.cpp}
{\xe \v git hub/Projeto_Stream/feedback.cpp}
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "feedback.hpp"}\par
{\f2 #include <iostream>}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
feedback.cpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/feedback.cpp}
{\xe \v git hub/Projeto_Stream/feedback.cpp}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
Ir para a documenta\'E7\'E3o desse arquivo.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "feedback.hpp"}\par
00002 {\cf21 #include <iostream>}\par
00003 \par
00004 {\cf18 void} Comentario::Fazer_comentario(std::string Musica, std::string Usuario)\{\par
00005     std::ofstream arquivo({\cf22 "FeedBack.txt"}, std::ios::app);\par
00006     {\cf19 if} (arquivo.is_open()) \{\par
00007     std::string comentario;\par
00008     std::cin.ignore(); {\cf20 /*usado para a criacao do comentario.*/}\par
00009     std::cout << {\cf22 "Digite seu comentario: "};\par
00010     std::getline(std::cin, comentario);\par
00011     \par
00012     arquivo << Musica << {\cf22 " , "} << Usuario << {\cf22 ":"} << comentario << std::endl; {\cf20 /*Adiciona o coment\'E1rio a mesma linha.*/}\par
00013     arquivo.close();\par
00014 \par
00015     std::cout << {\cf22 "Comentario registrado com sucesso!"} << std::endl;\par
00016     \} {\cf19 else} \{\par
00017     std::cout << {\cf22 "Nao foi possivel abrir o arquivo."} << std::endl;\par
00018     \}\par
00019 \}\par
00020 \par
00021 \par
00022 {\cf18 void} Comentario::Ler_comentario(std::string Musica, std::string Usuario) \{\par
00023     std::ifstream arquivo({\cf22 "FeedBack.txt"});\par
00024     std::string linha;\par
00025     {\cf19 if} (arquivo.is_open()) \{\par
00026         {\cf19 while} (getline(arquivo, linha)) \{\par
00027 \par
00028             std::size_t posMusica = linha.find(Musica);\par
00029             \par
00030             {\cf19 if} (posMusica != std::string::npos) \{\par
00031                 std::size_t separator = linha.find({\cf22 ","});\par
00032                 {\cf19 if} (separator != std::string::npos) \{\par
00033                     std::string comentario = linha.substr(separator + 2);\par
00034                     _comentarios.push_back(comentario);\par
00035                 \}\par
00036             \}\par
00037         \}\par
00038         arquivo.close();\par
00039 \par
00040         {\cf20 /*Imprimir os comentarios encontrados.*/}\par
00041         {\cf19 if} (!_comentarios.empty()) \{\par
00042             std::cout << {\cf22 "Comentarios encontrados:"} << std::endl;\par
00043             {\cf19 for} ({\cf17 const} {\cf17 auto}& comentario : _comentarios) \{\par
00044                 std::cout << comentario << std::endl;\par
00045             \}\par
00046         \} {\cf19 else} \{\par
00047             std::cout << {\cf22 "Nenhum comentario encontrado para essa musica e artista."} << std::endl;\par
00048         \}\par
00049     \} {\cf19 else} \{\par
00050         std::cout << {\cf22 "Erro ao abrir o arquivo."} << std::endl;\par
00051     \}\par
00052 \}\par
00053 \par
00054 \par
00055 \par
00056 {\cf18 void} Curtida::removerLinha(std::string usuario, std::string musica) \{\par
00057     std::ifstream arquivoEntrada({\cf22 "Curtidas.txt"});\par
00058     std::string linha;\par
00059     {\cf18 bool} linhaRemovida = {\cf17 false};\par
00060 \par
00061     {\cf19 if} (arquivoEntrada.is_open()) \{\par
00062         std::vector<std::string> linhasRestantes;\par
00063 \par
00064         {\cf19 while} (getline(arquivoEntrada, linha)) \{\par
00065             {\cf19 if} (linha.find(musica) != std::string::npos && linha.find(usuario) != std::string::npos) \{\par
00066                 linhaRemovida = {\cf17 true};\par
00067             \} {\cf19 else} \{\par
00068                 linhasRestantes.push_back(linha);\par
00069             \}\par
00070         \}\par
00071 \par
00072         arquivoEntrada.close();\par
00073        \par
00074 \par
00075         {\cf19 if} (linhaRemovida) \{\par
00076             std::ofstream arquivoFinal({\cf22 "Curtidas.txt"});\par
00077             {\cf19 for} ({\cf17 const} std::string& linha : linhasRestantes) \{\par
00078                 arquivoFinal << linha << std::endl;\par
00079             \}\par
00080             arquivoFinal.close();\par
00081 \par
00082         \} \par
00083     \} {\cf19 else} \{\par
00084         std::cout << {\cf22 "N\'E3o foi poss\'EDvel abrir o arquivo."} << std::endl;\par
00085         \par
00086     \}\par
00087 \}\par
00088 \par
00089 {\cf18 bool} Curtida::verificacao_curtidas(std::string Usuario, std::string Musica)\{\par
00090     std:: ifstream arquivo ({\cf22 "Curtidas.txt"});\par
00091     std:: string linha;\par
00092     {\cf19 if}(arquivo.is_open())\{\par
00093         \par
00094         {\cf19 while} (getline(arquivo, linha))\{\par
00095             {\cf19 if}(linha.find(Musica) != std::string::npos)\{\par
00096                 {\cf19 if}(linha.find(Usuario))\{\par
00097                     {\cf19 return} {\cf17 true};\par
00098                 \}\par
00099             \}\par
00100         \}\par
00101         \par
00102     \}{\cf19 else} \{\par
00103         std:: cout << {\cf22 "Nao foi possivel abrir o arquivo."}<< std :: endl;\par
00104     \}\par
00105         {\cf19 return} {\cf17 false};\par
00106 \}\par
00107 \par
00108 {\cf18 void} Curtida::like(std::string Musica, std::string Usuario)\{\par
00109      {\cf19 if} (verificacao_curtidas(Usuario, Musica)) \{\par
00110         removerLinha(Usuario, Musica);\par
00111         std::ofstream arquivo({\cf22 "Curtidas.txt"}, std::ios::app);\par
00112 \par
00113         {\cf19 if} (arquivo.is_open()) \{\par
00114             arquivo << Musica << {\cf22 ", "} << Usuario << {\cf22 ": "} << {\cf22 "Like"} << std::endl;\par
00115             arquivo.close();\par
00116             std::cout << {\cf22 "Like registrado com sucesso."} << std::endl;\par
00117         \} {\cf19 else} \{\par
00118             std::cout << {\cf22 "Nao foi poss\'EDvel abrir o arquivo."} << std::endl;\par
00119         \}\par
00120     \}{\cf19 else}\{\par
00121         std::ofstream arquivo({\cf22 "Curtidas.txt"}, std::ios::app);\par
00122 \par
00123         {\cf19 if} (arquivo.is_open()) \{\par
00124             arquivo << Musica << {\cf22 ", "} << Usuario << {\cf22 ": "} << {\cf22 "Like"} << std::endl;\par
00125             arquivo.close();\par
00126             std::cout << {\cf22 "Like registrado com sucesso."} << std::endl;\par
00127         \} {\cf19 else} \{\par
00128             std::cout << {\cf22 "Nao foi poss\'EDvel abrir o arquivo."} << std::endl;\par
00129         \}\par
00130     \}\par
00131 \} \par
00132 \par
00133 {\cf18 void} Curtida::dislike(std::string Musica, std::string Usuario )\{\par
00134     {\cf19 if} (verificacao_curtidas(Usuario, Musica)) \{\par
00135         removerLinha(Usuario, Musica);\par
00136         std::ofstream arquivo({\cf22 "Curtidas.txt"}, std::ios::app);\par
00137         {\cf19 if} (arquivo.is_open()) \{\par
00138             arquivo << Musica << {\cf22 ", "} << Usuario << {\cf22 ": "} << {\cf22 "Dislike"} << std::endl;\par
00139             arquivo.close();\par
00140             std::cout << {\cf22 "Dislike registrado com sucesso."} << std::endl;\par
00141         \} {\cf19 else} \{\par
00142             std::cout << {\cf22 "Nao foi poss\'EDvel abrir o arquivo."} << std::endl;\par
00143         \}\par
00144     \} {\cf19 else} \{\par
00145         std::ofstream arquivo({\cf22 "Curtidas.txt"}, std::ios::app);\par
00146         {\cf19 if} (arquivo.is_open()) \{\par
00147             arquivo << Musica << {\cf22 ", "} << Usuario << {\cf22 ": "} << {\cf22 "Dislike"} << std::endl;\par
00148             arquivo.close();\par
00149             std::cout << {\cf22 "Dislike registrado com sucesso."} << std::endl;\par
00150         \} {\cf19 else} \{\par
00151             std::cout << {\cf22 "Nao foi poss\'EDvel abrir o arquivo."} << std::endl;\par
00152         \}\par
00153     \}\par
00154 \} \par
00155 \par
00156 {\cf18 void} Curtida::ver_quatidade_curtias(std::string Musica )\{\par
00157     std::ifstream arquivo({\cf22 "Curtidas.txt"});\par
00158     std::string linha;\par
00159     Contl=0;\par
00160     Contd=0;\par
00161 \par
00162     {\cf19 if} (arquivo.is_open()) \{\par
00163         {\cf19 while} (getline(arquivo, linha)) \{\par
00164             std::size_t posMusica = linha.find(Musica);\par
00165             {\cf19 if} (posMusica != std::string::npos) \{\par
00166                 std::size_t separator = linha.find({\cf22 ":"});\par
00167                 {\cf19 if} (separator != std::string::npos) \{\par
00168                     std::string like = linha.substr(separator + 2);\par
00169                     {\cf19 if}(like == {\cf22 "Like"}) Contl++;\par
00170                     {\cf19 else} {\cf19 if}(like=={\cf22 "Dislike"}) Contd++;\par
00171                 \}\par
00172             \}\par
00173         \}\par
00174         arquivo.close();\par
00175 \par
00176         {\cf20 /*Imprimir quantidade de likes encontrados.*/}\par
00177        std:: cout <<{\cf22 "Quantidade de likes: "}<< Contl << std:: endl;\par
00178        std:: cout <<{\cf22 "Quantidade de dislikes: "}<< Contd << std:: endl;\par
00179     \} {\cf19 else} \{\par
00180         std::cout << {\cf22 "Erro ao abrir o arquivo."} << std::endl;\par
00181     \}\par
00182 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo git hub/Projeto_Stream/feedback.hpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/feedback.hpp}
{\xe \v git hub/Projeto_Stream/feedback.hpp}
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <string>}\par
{\f2 #include <iostream>}\par
{\f2 #include <fstream>}\par
{\f2 #include <list>}\par
{\f2 #include <map>}\par
{\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Comentario}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Curtida}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
feedback.hpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/feedback.hpp}
{\xe \v git hub/Projeto_Stream/feedback.hpp}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
Ir para a documenta\'E7\'E3o desse arquivo.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #ifndef FEEDBACK_CPP}\par
00002 {\cf21 #define FEEDBACK_CPP}\par
00003 {\cf21 #include <string>}\par
00004 {\cf21 #include <iostream>}\par
00005 {\cf21 #include <fstream>}\par
00006 {\cf21 #include <list>}\par
00007 {\cf21 #include <map>}\par
00008 {\cf21 #include <iostream>}\par
00009 {\cf21 #include <fstream>}\par
00010 {\cf21 #include <string>}\par
00011 {\cf21 #include <vector>}\par
00012 \par
00013 {\cf17 class }Comentario\{\par
00014     {\cf17 public}:\par
00023     {\cf18 void} Fazer_comentario(std::string, std::string);\par
00033     {\cf18 void} Ler_comentario(std::string, std::string);\par
00034 \par
00035     {\cf17 private}:\par
00036     std::list<std::string> _comentarios;\par
00037 \};\par
00038 \par
00039 {\cf17 class }Curtida \{\par
00040     {\cf17 public}:\par
00045     {\cf18 void} like(std::string, std::string);\par
00046 \par
00047     {\cf18 void} dislike( std::string, std::string);\par
00051     {\cf18 void} ver_quatidade_curtias(std:: string);\par
00057     {\cf18 bool} verificacao_curtidas (std::string, std::string);\par
00062     {\cf18 void} removerLinha(std::string usuario, std::string musica);\par
00063 \par
00064     {\cf17 private}:\par
00065     {\cf18 int} Contl;\par
00066     {\cf18 int} Contd;    \par
00067 \};\par
00068 \par
00069 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo git hub/Projeto_Stream/main.cpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/main.cpp}
{\xe \v git hub/Projeto_Stream/main.cpp}
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "pesquisa.hpp"}\par
{\f2 #include "cadastrousuario.hpp"}\par
{\f2 #include "reproducao.hpp"}\par
{\f2 #include "musicas.hpp"}\par
{\f2 #include "feedback.hpp"}\par
{\f2 #include <limits>}\par
{\f2 #include <algorithm>}\par
{\f2 #include <functional>}\par
{\f2 #include <locale.h>}\par
{\f2 #include <stdio.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v main\:main.cpp}
{\xe \v main.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main ()}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 12} do arquivo {\b main.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00012           \{\par
00013 \par
00014     setlocale(LC_ALL, {\cf22 "Portuguese"});\par
00015     std::string nomedeacesso;\par
00016     Iniciar app;\par
00017     \par
00018     app.exibirlogo();\par
00019     nomedeacesso = app.menu();\par
00020     \par
00021     std::cout<<{\cf22 "BEM VINDO "}<<nomedeacesso<<std::endl;\par
00022     std::cout<<std::endl;\par
00023     inicio:\par
00024     std::string palavra;\par
00025      \par
00026     \par
00027 \par
00028     std::cout << {\cf22 "Digite sua musica/Artista: "} << std::endl;\par
00029     std::getline(std::cin, palavra);\par
00030 \par
00031     Pesquisa::Pesquisar Busca(palavra);\par
00032     {\cf18 bool} resultado_da_busca = Busca.Encontrar();\par
00033     \par
00034 \par
00035     std::string _musica_escolhida;\par
00036     _musica_escolhida = Busca.Retorno_Pesquisa();\par
00037 \par
00038     \par
00039     {\cf19 if}(resultado_da_busca == {\cf17 true})\{\par
00040        Busca.repro.Executar({\cf22 "Musica_Exemplo.txt"}, _musica_escolhida);\par
00041     \}\par
00042     \par
00043     Musica minha_musica;\par
00044     {\cf18 bool} encerrar = {\cf17 true};\par
00045     {\cf19 if}(resultado_da_busca)\{\par
00046     std::cout << {\cf22 "**********************"} << std::endl;\par
00047     std::cout << {\cf22 "**** REPRODUZINDO ****"} << std::endl;\par
00048     std::cout << {\cf22 "**********************"} << std::endl;\par
00049     std::cout << {\cf22 "(1) - Pausar |(II)"} << std::endl;\par
00050     std::cout << {\cf22 "(2) - Avancar|(>>)"} << std::endl;\par
00051     std::cout << {\cf22 "(3) - Voltar |(<<)"} << std::endl;\par
00052     std::cout << {\cf22 "(4) - Fechar |(X)"} << std::endl;\par
00053     std::cout << {\cf22 "******* OUTROS *******"} << std::endl;\par
00054     std::cout << {\cf22 "(5) - Adicionar Musicas"} << std::endl;\par
00055     std::cout << {\cf22 "(6) - Remover Musicas"} << std::endl;\par
00056     std::cout << {\cf22 "(7) - Fazer uma nova Pesquisa"} << std::endl;\par
00057     std::cout << {\cf22 "(8) - Para deixar seu like"} << std::endl;\par
00058     std::cout << {\cf22 "(9) - Para deixar seu dislike"} << std::endl;\par
00059     std::cout << {\cf22 "(10) - Para fazer seus comentarios"} << std::endl;\par
00060     std::cout << {\cf22 "(11) - Para ler comentarios"} << std::endl;\par
00061     std::cout << {\cf22 "******* OBSERVACAO *******"} << std::endl;\par
00062     Curtida obs;\par
00063     Comentario coment;\par
00064     obs.ver_quatidade_curtias(_musica_escolhida);\par
00065 \par
00066     {\cf19 while} (encerrar)\par
00067     \{   \par
00068         {\cf18 int} opcao;\par
00069         std::string operacao;\par
00070         std::cin >> operacao;\par
00071         {\cf19 try} \{\par
00072             opcao = std::stoi(operacao);\par
00073         \} \par
00074     \par
00075         {\cf19 catch} (...) \{\par
00076             std::cout << {\cf22 "Entrada invalida. Digite o numero desejado."} << std::endl;\par
00077             {\cf19 continue};\par
00078         \}\par
00079 \par
00080         {\cf19 switch} (opcao)\par
00081         \{\par
00082         {\cf19 case}(1):\par
00083             Busca.repro.Parar_Executar();\par
00084             {\cf19 break};\par
00085         {\cf19 case}(2):\par
00086             Busca.repro.Pular_p_frente({\cf22 "Musica_Exemplo.txt"});\par
00087 \par
00088             obs.ver_quatidade_curtias(Busca.repro.Retornar_nome());\par
00089             {\cf19 break};\par
00090         {\cf19 case}(3):\par
00091             Busca.repro.Pular_p_tras({\cf22 "Musica_Exemplo.txt"});\par
00092             obs.ver_quatidade_curtias(Busca.repro.Retornar_nome());\par
00093             {\cf19 break};\par
00094         {\cf19 case}(4):\par
00095             std::cout << {\cf22 "Obrigado por usar o app PANCADAO"} << std::endl;\par
00096             Busca.repro.Encerrar();\par
00097             encerrar = {\cf17 false};\par
00098             {\cf19 break};\par
00099         {\cf19 case}(5):\par
00100             minha_musica.adicionar_musica({\cf22 "Musica_Exemplo.txt"});\par
00101             {\cf19 break};\par
00102         {\cf19 case}(6):\par
00103             minha_musica.Remove_musica({\cf22 "Musica_Exemplo.txt"});\par
00104             {\cf19 break};\par
00105         {\cf19 case}(7):\par
00106             {\cf19 goto} ibusca;\par
00107             {\cf19 break};\par
00108         {\cf19 case}(8):\par
00109             obs.like(Busca.repro.Retornar_nome(), nomedeacesso);\par
00110             obs.ver_quatidade_curtias(Busca.repro.Retornar_nome());\par
00111             {\cf19 break};\par
00112         {\cf19 case}(9):\par
00113             obs.dislike(Busca.repro.Retornar_nome(), nomedeacesso);\par
00114             obs.ver_quatidade_curtias(Busca.repro.Retornar_nome());\par
00115             {\cf19 break};\par
00116         {\cf19 case}(10):\par
00117             coment.Fazer_comentario(Busca.repro.Retornar_nome(), nomedeacesso);\par
00118             {\cf19 break};\par
00119         {\cf19 case}(11):\par
00120             coment.Ler_comentario(Busca.repro.Retornar_nome(), nomedeacesso);\par
00121             {\cf19 break};\par
00122         {\cf19 default}:\par
00123             std::cout << {\cf22 "Opcao nao encontrada. Tente Novamente"} << std::endl;\par
00124             {\cf19 continue};\par
00125             encerrar = {\cf17 false};\par
00126             {\cf19 break};\par
00127         \}\par
00128     \}\par
00129 \}\par
00130     {\cf19 else}\{\par
00131         ibusca:\par
00132         {\cf18 bool} continuar = {\cf17 true};\par
00133         {\cf19 while} (continuar)\par
00134         \{\par
00135         std::cout << {\cf22 "Deseja fazer uma nova busca?"} << std::endl;\par
00136         std::cout << {\cf22 "1 - sim"} << std::endl;\par
00137         std::cout << {\cf22 "2 - nao"} << std::endl;\par
00138         {\cf18 int} valor = 0;\par
00139         std::cin >> valor;\par
00140         {\cf19 switch} (valor)\{\par
00141             {\cf19 case}(1):\par
00142             std::cin.ignore(std::numeric_limits<std::streamsize>::max(), {\cf23 '\\n'});\par
00143             {\cf19 goto} inicio;\par
00144               {\cf19 break};\par
00145             {\cf19 case}(2):\par
00146               continuar = {\cf17 false};\par
00147               {\cf19 break};\par
00148             {\cf19 default}:\par
00149             {\cf19 continue};\par
00150               {\cf19 break};\par
00151           \}\par
00152         \}\par
00153         \par
00154     \}\par
00155     \par
00156     \par
00157     {\cf19 return} 0;\par
00158 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
main.cpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/main.cpp}
{\xe \v git hub/Projeto_Stream/main.cpp}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
Ir para a documenta\'E7\'E3o desse arquivo.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "pesquisa.hpp"}\par
00002 {\cf21 #include "cadastrousuario.hpp"}\par
00003 {\cf21 #include "reproducao.hpp"}\par
00004 {\cf21 #include "musicas.hpp"}\par
00005 {\cf21 #include "feedback.hpp"}\par
00006 {\cf21 #include <limits>}\par
00007 {\cf21 #include <algorithm>}\par
00008 {\cf21 #include <functional>}\par
00009 {\cf21 #include <locale.h>}\par
00010 {\cf21 #include <stdio.h>}\par
00011 \par
00012 {\cf18 int} main()\{\par
00013 \par
00014     setlocale(LC_ALL, {\cf22 "Portuguese"});\par
00015     std::string nomedeacesso;\par
00016     Iniciar app;\par
00017     \par
00018     app.exibirlogo();\par
00019     nomedeacesso = app.menu();\par
00020     \par
00021     std::cout<<{\cf22 "BEM VINDO "}<<nomedeacesso<<std::endl;\par
00022     std::cout<<std::endl;\par
00023     inicio:\par
00024     std::string palavra;\par
00025      \par
00026     \par
00027 \par
00028     std::cout << {\cf22 "Digite sua musica/Artista: "} << std::endl;\par
00029     std::getline(std::cin, palavra);\par
00030 \par
00031     Pesquisa::Pesquisar Busca(palavra);\par
00032     {\cf18 bool} resultado_da_busca = Busca.Encontrar();\par
00033     \par
00034 \par
00035     std::string _musica_escolhida;\par
00036     _musica_escolhida = Busca.Retorno_Pesquisa();\par
00037 \par
00038     \par
00039     {\cf19 if}(resultado_da_busca == {\cf17 true})\{\par
00040        Busca.repro.Executar({\cf22 "Musica_Exemplo.txt"}, _musica_escolhida);\par
00041     \}\par
00042     \par
00043     Musica minha_musica;\par
00044     {\cf18 bool} encerrar = {\cf17 true};\par
00045     {\cf19 if}(resultado_da_busca)\{\par
00046     std::cout << {\cf22 "**********************"} << std::endl;\par
00047     std::cout << {\cf22 "**** REPRODUZINDO ****"} << std::endl;\par
00048     std::cout << {\cf22 "**********************"} << std::endl;\par
00049     std::cout << {\cf22 "(1) - Pausar |(II)"} << std::endl;\par
00050     std::cout << {\cf22 "(2) - Avancar|(>>)"} << std::endl;\par
00051     std::cout << {\cf22 "(3) - Voltar |(<<)"} << std::endl;\par
00052     std::cout << {\cf22 "(4) - Fechar |(X)"} << std::endl;\par
00053     std::cout << {\cf22 "******* OUTROS *******"} << std::endl;\par
00054     std::cout << {\cf22 "(5) - Adicionar Musicas"} << std::endl;\par
00055     std::cout << {\cf22 "(6) - Remover Musicas"} << std::endl;\par
00056     std::cout << {\cf22 "(7) - Fazer uma nova Pesquisa"} << std::endl;\par
00057     std::cout << {\cf22 "(8) - Para deixar seu like"} << std::endl;\par
00058     std::cout << {\cf22 "(9) - Para deixar seu dislike"} << std::endl;\par
00059     std::cout << {\cf22 "(10) - Para fazer seus comentarios"} << std::endl;\par
00060     std::cout << {\cf22 "(11) - Para ler comentarios"} << std::endl;\par
00061     std::cout << {\cf22 "******* OBSERVACAO *******"} << std::endl;\par
00062     Curtida obs;\par
00063     Comentario coment;\par
00064     obs.ver_quatidade_curtias(_musica_escolhida);\par
00065 \par
00066     {\cf19 while} (encerrar)\par
00067     \{   \par
00068         {\cf18 int} opcao;\par
00069         std::string operacao;\par
00070         std::cin >> operacao;\par
00071         {\cf19 try} \{\par
00072             opcao = std::stoi(operacao);\par
00073         \} \par
00074     \par
00075         {\cf19 catch} (...) \{\par
00076             std::cout << {\cf22 "Entrada invalida. Digite o numero desejado."} << std::endl;\par
00077             {\cf19 continue};\par
00078         \}\par
00079 \par
00080         {\cf19 switch} (opcao)\par
00081         \{\par
00082         {\cf19 case}(1):\par
00083             Busca.repro.Parar_Executar();\par
00084             {\cf19 break};\par
00085         {\cf19 case}(2):\par
00086             Busca.repro.Pular_p_frente({\cf22 "Musica_Exemplo.txt"});\par
00087 \par
00088             obs.ver_quatidade_curtias(Busca.repro.Retornar_nome());\par
00089             {\cf19 break};\par
00090         {\cf19 case}(3):\par
00091             Busca.repro.Pular_p_tras({\cf22 "Musica_Exemplo.txt"});\par
00092             obs.ver_quatidade_curtias(Busca.repro.Retornar_nome());\par
00093             {\cf19 break};\par
00094         {\cf19 case}(4):\par
00095             std::cout << {\cf22 "Obrigado por usar o app PANCADAO"} << std::endl;\par
00096             Busca.repro.Encerrar();\par
00097             encerrar = {\cf17 false};\par
00098             {\cf19 break};\par
00099         {\cf19 case}(5):\par
00100             minha_musica.adicionar_musica({\cf22 "Musica_Exemplo.txt"});\par
00101             {\cf19 break};\par
00102         {\cf19 case}(6):\par
00103             minha_musica.Remove_musica({\cf22 "Musica_Exemplo.txt"});\par
00104             {\cf19 break};\par
00105         {\cf19 case}(7):\par
00106             {\cf19 goto} ibusca;\par
00107             {\cf19 break};\par
00108         {\cf19 case}(8):\par
00109             obs.like(Busca.repro.Retornar_nome(), nomedeacesso);\par
00110             obs.ver_quatidade_curtias(Busca.repro.Retornar_nome());\par
00111             {\cf19 break};\par
00112         {\cf19 case}(9):\par
00113             obs.dislike(Busca.repro.Retornar_nome(), nomedeacesso);\par
00114             obs.ver_quatidade_curtias(Busca.repro.Retornar_nome());\par
00115             {\cf19 break};\par
00116         {\cf19 case}(10):\par
00117             coment.Fazer_comentario(Busca.repro.Retornar_nome(), nomedeacesso);\par
00118             {\cf19 break};\par
00119         {\cf19 case}(11):\par
00120             coment.Ler_comentario(Busca.repro.Retornar_nome(), nomedeacesso);\par
00121             {\cf19 break};\par
00122         {\cf19 default}:\par
00123             std::cout << {\cf22 "Opcao nao encontrada. Tente Novamente"} << std::endl;\par
00124             {\cf19 continue};\par
00125             encerrar = {\cf17 false};\par
00126             {\cf19 break};\par
00127         \}\par
00128     \}\par
00129 \}\par
00130     {\cf19 else}\{\par
00131         ibusca:\par
00132         {\cf18 bool} continuar = {\cf17 true};\par
00133         {\cf19 while} (continuar)\par
00134         \{\par
00135         std::cout << {\cf22 "Deseja fazer uma nova busca?"} << std::endl;\par
00136         std::cout << {\cf22 "1 - sim"} << std::endl;\par
00137         std::cout << {\cf22 "2 - nao"} << std::endl;\par
00138         {\cf18 int} valor = 0;\par
00139         std::cin >> valor;\par
00140         {\cf19 switch} (valor)\{\par
00141             {\cf19 case}(1):\par
00142             std::cin.ignore(std::numeric_limits<std::streamsize>::max(), {\cf23 '\\n'});\par
00143             {\cf19 goto} inicio;\par
00144               {\cf19 break};\par
00145             {\cf19 case}(2):\par
00146               continuar = {\cf17 false};\par
00147               {\cf19 break};\par
00148             {\cf19 default}:\par
00149             {\cf19 continue};\par
00150               {\cf19 break};\par
00151           \}\par
00152         \}\par
00153         \par
00154     \}\par
00155     \par
00156     \par
00157     {\cf19 return} 0;\par
00158 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo git hub/Projeto_Stream/musicas.cpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/musicas.cpp}
{\xe \v git hub/Projeto_Stream/musicas.cpp}
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "musicas.hpp"}\par
{\f2 #include <limits>}\par
{\f2 #include "pesquisa.hpp"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
musicas.cpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/musicas.cpp}
{\xe \v git hub/Projeto_Stream/musicas.cpp}
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
Ir para a documenta\'E7\'E3o desse arquivo.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "musicas.hpp"}\par
00002 {\cf21 #include <limits>}\par
00003 {\cf21 #include "pesquisa.hpp"}\par
00004 Musica::Musica()\par
00005 \{\par
00006     \par
00007 \}\par
00008 std::string Musica::Tratamento_de_Palavras(std::string musica_ou_artista)\{\par
00009     {\cf19 if}(musica_ou_artista!={\cf22 ""})\{\par
00010         musica_ou_artista[0] = std::toupper(musica_ou_artista[0]);\par
00011         {\cf19 for}({\cf18 unsigned} i=1; i < musica_ou_artista.size(); i++)\{\par
00012             {\cf19 if} (musica_ou_artista[i-1] == {\cf23 ' '}) \{\par
00013             musica_ou_artista[i] = std::toupper(musica_ou_artista[i]);\par
00014             \}{\cf19 else}\{\par
00015             musica_ou_artista[i] = std::tolower(musica_ou_artista[i]);\par
00016             \}\par
00017 \par
00018         \}\par
00019     \}\par
00020     {\cf19 return} musica_ou_artista;\par
00021 \}\par
00022 \par
00023 {\cf18 void} Musica::adicionar_musica({\cf17 const} std::string& nomeArquivo) \{\par
00024     std::map<std::string, std::string> mapa = lerArquivoParaMap(nomeArquivo);\par
00025 \par
00026     std::string artista;\par
00027     std::string musica;\par
00028     std::string link;\par
00029 \par
00030     std::cin.ignore(std::numeric_limits<std::streamsize>::max(), {\cf23 '\\n'});\par
00031     std::cout << {\cf22 "Digite o nome do Artista: "};\par
00032     std::getline(std::cin, artista);\par
00033 \par
00034     std::cout << {\cf22 "Digite o nome da m\'FAsica: "};\par
00035     std::getline(std::cin, musica);\par
00036     \par
00037     std::cout << {\cf22 "Digite o link da m\'FAsica: "};\par
00038     std::getline(std::cin, link);\par
00039     {\cf20 /* trata as palavras. Se o usuario entrar com "bruno mars", }\par
00040 {\cf20     ele transforma para "Bruno Mars"*/}\par
00041     artista = Tratamento_de_Palavras(artista); \par
00042     musica = Tratamento_de_Palavras(musica);\par
00043 \par
00044     mapa.insert(std::make_pair(artista + {\cf22 " - "} + musica, link));\par
00045 \par
00046     std::ofstream arquivo(nomeArquivo);\par
00047     {\cf19 if} (arquivo.is_open()) \{\par
00048         {\cf19 for} ({\cf17 const} {\cf17 auto}& par : mapa) \{\par
00049             arquivo << par.first << {\cf22 ","} << par.second << std::endl;\par
00050         \}\par
00051         arquivo.close();\par
00052         std::cout << {\cf22 "Dados salvos no arquivo."} << std::endl;\par
00053     \} {\cf19 else} \{\par
00054         std::cout << {\cf22 "Nao foi poss\'EDvel abrir o arquivo para escrita."} << std::endl;\par
00055     \}\par
00056 \}\par
00057 \par
00058 {\cf18 void} Musica::Remove_musica({\cf17 const} std::string& nomeArquivo)\{\par
00059     std::map<std::string, std::string> mapa = lerArquivoParaMap(nomeArquivo);\par
00060 \par
00061     std::string musica;\par
00062 \par
00063     std::cout << {\cf22 "Digite o nome da musica a ser apagada: "};\par
00064     std::cin.ignore(std::numeric_limits<std::streamsize>::max(), {\cf23 '\\n'});\par
00065     std::getline(std::cin, musica);\par
00066 \par
00067 \par
00068     Pesquisa::Pesquisar amusica(musica);\par
00069     amusica.Encontrar();\par
00070     musica = amusica.Retorno_Pesquisa();\par
00071     {\cf17 auto} it = mapa.find(musica);\par
00072     {\cf19 if} (it != mapa.end()) \{\par
00073         mapa.erase(it);\par
00074         salvarMapEmArquivo(nomeArquivo, mapa);\par
00075         std::cout << {\cf22 "Musica removida com sucesso."} << std::endl;\par
00076     \} {\cf19 else} \{\par
00077         std::cout << {\cf22 "Musica n\'E3o encontrada."} << std::endl;\par
00078     \}\par
00079 \}\par
00080 \par
00081 std::map<std::string, std::string> Musica::lerArquivoParaMap({\cf17 const} std::string& nomeArquivo) \{\par
00082     std::map<std::string, std::string> mapa;\par
00083 \par
00084     std::ifstream arquivo(nomeArquivo);\par
00085     {\cf19 if} (arquivo.is_open()) \{\par
00086         std::string linha;\par
00087         {\cf19 while} (std::getline(arquivo, linha)) \{\par
00088             {\cf18 size_t} pos = linha.find({\cf23 ','});\par
00089             {\cf19 if} (pos != std::string::npos) \{\par
00090                 std::string musica = linha.substr(0, pos);\par
00091                 std::string link = linha.substr(pos + 1);\par
00092                 mapa[musica] = link;\par
00093             \}\par
00094         \}\par
00095         arquivo.close();\par
00096         std::cout << {\cf22 "Dados lidos com sucesso do arquivo."} << std::endl;\par
00097     \} {\cf19 else} \{\par
00098         std::cout << {\cf22 "Arquivo n\'E3o encontrado. Ser\'E1 criado um novo arquivo."} << std::endl;\par
00099     \}\par
00100 \par
00101     {\cf19 return} mapa;\par
00102 \}\par
00103 \par
00104 {\cf18 void} Musica::salvarMapEmArquivo({\cf17 const} std::string& nomeArquivo, {\cf17 const} std::map<std::string, std::string>& mapa) \{\par
00105     std::ofstream arquivo(nomeArquivo);\par
00106     {\cf19 if} (arquivo.is_open()) \{\par
00107         {\cf19 for} ({\cf17 const} {\cf17 auto}& par : mapa) \{\par
00108             arquivo << par.first << {\cf22 ","} << par.second << std::endl;\par
00109         \}\par
00110         arquivo.close();\par
00111         std::cout << {\cf22 "Dados salvos no arquivo."} << std::endl;\par
00112     \} {\cf19 else} \{\par
00113         std::cout << {\cf22 "N\'E3o foi poss\'EDvel abrir o arquivo para escrita."} << std::endl;\par
00114     \}\par
00115 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo git hub/Projeto_Stream/musicas.hpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/musicas.hpp}
{\xe \v git hub/Projeto_Stream/musicas.hpp}
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "reproducao.hpp"}\par
{\f2 #include <fstream>}\par
{\f2 #include <map>}\par
{\f2 #include <sstream>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Musica}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe respons\'E1vel pelo gerenciamento das m\'FAsicas. }}\par}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
musicas.hpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/musicas.hpp}
{\xe \v git hub/Projeto_Stream/musicas.hpp}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
Ir para a documenta\'E7\'E3o desse arquivo.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "reproducao.hpp"}\par
00002 {\cf21 #include <fstream>}\par
00003 {\cf21 #include <map>}\par
00004 {\cf21 #include <sstream>}\par
00005 \par
00007 {\cf17 class }Musica\par
00008 \{  \par
00009 {\cf17 public}:\par
00010     Musica();\par
00017     {\cf18 void} adicionar_musica({\cf17 const} std::string& nomeArquivo);\par
00025     {\cf18 void} Remove_musica({\cf17 const} std::string& nomeArquivo);\par
00026     \par
00027 {\cf17 private}:\par
00035     std::string Tratamento_de_Palavras(std::string musica_ou_artista);\par
00044     std::map<std::string, std::string> lerArquivoParaMap({\cf17 const} std::string& nomeArquivo);\par
00045     {\cf18 void} salvarMapEmArquivo({\cf17 const} std::string& nomeArquivo, {\cf17 const} std::map<std::string, std::string>& mapa);   \par
00046 \};\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo git hub/Projeto_Stream/pesquisa.cpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/pesquisa.cpp}
{\xe \v git hub/Projeto_Stream/pesquisa.cpp}
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "pesquisa.hpp"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
pesquisa.cpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/pesquisa.cpp}
{\xe \v git hub/Projeto_Stream/pesquisa.cpp}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
Ir para a documenta\'E7\'E3o desse arquivo.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "pesquisa.hpp"}\par
00002 \par
00003 Pesquisa::Pesquisar::Pesquisar(std::string palavra) : _palavra(palavra)\{\}\par
00004 \par
00005 {\cf18 bool} Pesquisa::Pesquisar::Encontrar() \{\par
00006     \par
00007     {\cf19 if}(!_palavra.empty())\{\par
00008         _palavra[0] = std::toupper(_palavra[0]);\par
00009         {\cf19 for}({\cf18 unsigned} i=1; i < _palavra.size(); i++)\{\par
00010             {\cf19 if} (_palavra[i-1] == {\cf23 ' '}) \{\par
00011             _palavra[i] = std::toupper(_palavra[i]);\par
00012             \}{\cf19 else}\{\par
00013             _palavra[i] = std::tolower(_palavra[i]);\par
00014             \}\par
00015 \par
00016         \}\par
00017     \}{\cf20 // Converte pra minuscula e as iniciais em maiusculo}\par
00018 \par
00019     std::ifstream Musica_Exemplo({\cf22 "Musica_Exemplo.txt"});\par
00020     std::string linha;\par
00021 \par
00022     {\cf19 if} (Musica_Exemplo.is_open()) \{\par
00023     \}\par
00024     {\cf19 else} \{\par
00025         std::cout << {\cf22 "Nao foi possivel abrir o arquivo.txt"} << std::endl;\par
00026     \par
00027     \}{\cf20 //abrindo o arquivo.}\par
00028 \par
00029    {\cf19 while} (getline(Musica_Exemplo, linha)) \{\par
00030         std::size_t pos = linha.find({\cf22 ","});\par
00031         {\cf19 if} (pos != std::string::npos) \{\par
00032             std::string titulo = linha.substr(0, pos);\par
00033             \par
00034             std::vector<std::string> palavras_subdivididas;\par
00035             std::string palavra;\par
00036             std::istringstream iss(_palavra);\par
00037 \par
00038             {\cf19 while} (iss >> palavra) \{\par
00039                 palavras_subdivididas.push_back(palavra);\par
00040             \}\par
00041             {\cf18 int} contador_de_palavras=0;\par
00042             {\cf18 unsigned} i=0;\par
00043 \par
00044             {\cf19 while} (i < palavras_subdivididas.size())\{\par
00045 \par
00046                 {\cf19 if} (titulo.find(palavras_subdivididas[i]) != std::string::npos) \{\par
00047                     contador_de_palavras++;\par
00048                 \}\par
00049 \par
00050             i++;    \par
00051             \}\par
00052             _resultados.insert(std::make_pair(contador_de_palavras, titulo));\par
00053         \}\par
00054         \par
00055     \}\par
00056 \par
00057     {\cf20 //1\'EF\'BF\'BD obtenho cada linha e guardo em _linha, depois encntro a 1 ocorrencia que seria no caso de copiar toda a string}\par
00058     {\cf20 //antes do link(ou seja a substring), pois n\'EF\'BF\'BDo quero exibir isso para o usuario. Logo ap\'EF\'BF\'BDs eu encontro dentro dessa substring}\par
00059     {\cf20 //a palavra "_palavra" e assim guardo em _resultados.}\par
00060     {\cf19 for} ({\cf17 auto}& pair : _resultados) \{\par
00061         std::string& value = pair.second;\par
00062         {\cf19 if} (!value.empty()) \{\par
00063             value[0] = std::toupper(value[0]);\par
00064             {\cf19 for} ({\cf18 size_t} i = 1; i < value.size(); i++) \{\par
00065                 {\cf19 if} (value[i - 1] == {\cf23 ' '}) \{\par
00066                     value[i] = std::toupper(value[i]);\par
00067                 \}\par
00068             \}\par
00069         \}\par
00070     \}\par
00071     {\cf20 //converto tudo que esta depois do espa\'EF\'BF\'BDo para letra maiuscula.}\par
00072 \par
00073     {\cf18 bool} encontrouResultados = {\cf17 false};\par
00074     {\cf19 for} ({\cf17 const} {\cf17 auto}& pair : _resultados) \{\par
00075         {\cf19 if} (pair.first > 0) \{\par
00076             encontrouResultados = {\cf17 true};\par
00077             {\cf19 break};\par
00078         \}\par
00079     \}\par
00080 \par
00081     {\cf19 if} (!encontrouResultados) \{\par
00082         std::cout << {\cf22 "Nenhum resultado encontrado para: "} << _palavra << std::endl;\par
00083         {\cf19 return} {\cf17 false};\par
00084     \}\par
00085     {\cf19 else}\{\par
00086         {\cf19 return} confirma_Busca();\par
00087     \}\par
00088 \}\par
00089 \par
00090 {\cf18 bool} Pesquisa::Pesquisar::confirma_Busca()\{\par
00091     std::cout << {\cf22 "Voce deseja: "} << std::endl;\par
00092         {\cf18 int} count = 1;\par
00093         {\cf19 for} ({\cf17 auto} it = _resultados.rbegin(); it != _resultados.rend(); ++it) \{\par
00094             {\cf19 if}(it->first != 0)\{                \par
00095                 std::cout << {\cf22 "("} << count << {\cf22 ") "} << it->second << std::endl;\par
00096                 _encontrado[count] = it->second;\par
00097                 count++;\par
00098                 {\cf19 if} (count == 4) \{\par
00099                     {\cf19 break};\par
00100                 \}\par
00101             \}\par
00102         \}\par
00103 \par
00104            \par
00105     {\cf18 int} opcao;\par
00106     {\cf18 bool} encontrado = {\cf17 false};\par
00107 \par
00108     std::cout << {\cf22 "Digite o numero desejado"} << std::endl;\par
00109     {\cf19 while}(encontrado == {\cf17 false})\{\par
00110         std::string opcao_string;\par
00111         std::getline(std::cin, opcao_string); {\cf20 // l\'EF\'BF\'BD a string.}\par
00112 \par
00113         {\cf20 // Verificar se a entrada \'EF\'BF\'BD um n\'EF\'BF\'BDmero inteiro}\par
00114         {\cf19 try} \{\par
00115             opcao = std::stoi(opcao_string);\par
00116         \} \par
00117     \par
00118         {\cf19 catch} (...) \{\par
00119             std::cout << {\cf22 "Entrada invalida. Digite o numero desejado."} << std::endl;\par
00120             {\cf19 continue};\par
00121         \}\par
00122         {\cf19 for} ({\cf17 auto} it = _encontrado.begin(); it != _encontrado.end(); it++)\{\par
00123             {\cf19 if}(opcao == it->first)\{\par
00124                 std::cout << {\cf22 "Voce escolheu: "} << it->second << std::endl;\par
00125                 encontrado = {\cf17 true};\par
00126                 _musica_escolhida = it->second;\par
00127                 \par
00128                 {\cf19 break};\par
00129             \}\par
00130         \par
00131         \}\par
00132 \par
00133     \}\par
00134 \par
00135 {\cf19 return} {\cf17 true};\par
00136 \}\par
00137 \par
00138 std::string Pesquisa::Pesquisar::Retorno_Pesquisa()\{\par
00139     {\cf19 return} _musica_escolhida;\par
00140 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo git hub/Projeto_Stream/pesquisa.hpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/pesquisa.hpp}
{\xe \v git hub/Projeto_Stream/pesquisa.hpp}
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <string>}\par
{\f2 #include <iostream>}\par
{\f2 #include <fstream>}\par
{\f2 #include <vector>}\par
{\f2 #include <cctype>}\par
{\f2 #include <map>}\par
{\f2 #include <sstream>}\par
{\f2 #include "reproducao.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Pesquisa::Pesquisar}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b Pesquisa}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
pesquisa.hpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/pesquisa.hpp}
{\xe \v git hub/Projeto_Stream/pesquisa.hpp}
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
Ir para a documenta\'E7\'E3o desse arquivo.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #ifndef PESQUISA_HPP}\par
00002 {\cf21 #define PESQUISA_HPP}\par
00003 \par
00004 {\cf21 #include <string>}\par
00005 {\cf21 #include <iostream>}\par
00006 {\cf21 #include <fstream>}\par
00007 {\cf21 #include <vector>}\par
00008 {\cf21 #include <cctype>}\par
00009 {\cf21 #include <map>}\par
00010 {\cf21 #include <sstream>}\par
00011 {\cf21 #include "reproducao.hpp"}\par
00012 \par
00013 {\cf17 namespace }Pesquisa\{\par
00014     {\cf17 class }Pesquisar \{\par
00015     {\cf17 public}:\par
00019         Pesquisar(std::string palavra);\par
00027         {\cf18 bool} Encontrar();\par
00035         {\cf18 bool} confirma_Busca();\par
00039         std::string Retorno_Pesquisa();\par
00044         reproducao repro;\par
00045         \par
00046     {\cf17 private}:\par
00047     std::string _palavra;  \par
00048     std::multimap<int, std::string> _resultados;\par
00049     std::map<double, std::string> _encontrado;\par
00050     std::string _musica_escolhida;\par
00051     \};  \par
00052 \}\par
00053 \par
00054 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo git hub/Projeto_Stream/README.md\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/README.md}
{\xe \v git hub/Projeto_Stream/README.md}
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo git hub/Projeto_Stream/reproducao.cpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/reproducao.cpp}
{\xe \v git hub/Projeto_Stream/reproducao.cpp}
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "reproducao.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
BOOL CALLBACK {\b EnumWindowsCallback} (HWND hWnd, LPARAM lParam)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v EnumWindowsCallback\:reproducao.cpp}
{\xe \v reproducao.cpp\:EnumWindowsCallback}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
BOOL CALLBACK EnumWindowsCallback (HWND  {\i hWnd}, LPARAM  {\i lParam})}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 175} do arquivo {\b reproducao.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00176 \{\par
00177     {\cf20 /*Verificar se a janela pertence a um navegador*/}\par
00178     TCHAR className[256];\par
00179     {\cf19 if} (GetClassName(hWnd, className, 256))\par
00180     \{\par
00181         {\cf19 if} (_tcscmp(className, _T({\cf22 "Chrome_WidgetWin_1"})) == 0 ||\par
00182             _tcscmp(className, _T({\cf22 "MozillaWindowClass"})) == 0 ||\par
00183             _tcscmp(className, _T({\cf22 "IEFrame"})) == 0 ||\par
00184             _tcscmp(className, _T({\cf22 "ApplicationFrameWindow"})) == 0 ||\par
00185             _tcscmp(className, _T({\cf22 "MicrosoftEdgeWindowClass"})) == 0)\par
00186         \{\par
00187             {\cf20 /*Verificar se o titulo da janela corresponde ao Visual Studio Code*/}\par
00188             TCHAR windowTitle[256];\par
00189             {\cf19 if} (GetWindowText(hWnd, windowTitle, 256) > 0)\par
00190             \{\par
00191                 {\cf19 if} (_tcsstr(windowTitle, _T({\cf22 "Visual Studio Code"})) != {\cf17 nullptr})\par
00192                 \{\par
00193                     {\cf20 /*Pular esta janela e continuar para a proxima*/}\par
00194                     {\cf19 return} TRUE;\par
00195                 \}\par
00196             \}\par
00197 \par
00198             {\cf20 /*Enviar mensagem de fechamento para a janela*/}\par
00199             SendMessage(hWnd, WM_CLOSE, 0, 0);\par
00200         \}\par
00201     \}\par
00202 \par
00203     {\cf19 return} TRUE;\par
00204 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
reproducao.cpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/reproducao.cpp}
{\xe \v git hub/Projeto_Stream/reproducao.cpp}
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
Ir para a documenta\'E7\'E3o desse arquivo.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "reproducao.hpp"}\par
00002 \par
00003 reproducao::reproducao() : posicaoAtual(-1)\par
00004 \{\par
00005 \par
00006 \}\par
00007 \par
00008 {\cf18 void} reproducao::Executar({\cf17 const} std::string& nomeArquivo, std::string nome_musica)\par
00009 \{\par
00010     std::map<std::string, std::string> mapa2 = ler_arquivo_em_map(nomeArquivo);\par
00011 \par
00012     std::string musica;\par
00013 \par
00014     std::cout << {\cf22 "sua musica esta sendo buscada"} << std::endl;\par
00015     Sleep(5000);\par
00016 \par
00017     {\cf17 auto} it = mapa2.find(nome_musica);\par
00018     {\cf19 if} (it != mapa2.end())\par
00019     \{\par
00020         std::string link = it->second;\par
00021         std::string musica = it->first;\par
00022         _musica_escolhida = musica;\par
00023         std::cout << {\cf22 "Abrindo musica: "} << musica << std::endl;\par
00024 \par
00025         {\cf20 /*Converter a string para o tipo LPCWSTR*/}\par
00026         std::wstring linkWide(link.begin(), link.end());\par
00027         LPCWSTR linkLpcwstr = linkWide.c_str();\par
00028 \par
00029         {\cf20 /*Abrir o link da musica usando o ShellExecute*/}\par
00030         ShellExecute(NULL, L{\cf22 "open"}, linkLpcwstr, NULL, NULL, SW_SHOWNORMAL);\par
00031 \par
00032         {\cf20 /*Atualizar a posicao atual para a posicao do link executado*/}\par
00033         posicaoAtual = std::distance(mapa2.begin(), it);\par
00034     \}\par
00035     {\cf19 else}\par
00036     \{\par
00037         std::cout << {\cf22 "Musica nao encontrada."} << std::endl;\par
00038     \}\par
00039 \}\par
00040 \par
00041 {\cf18 void} reproducao::Parar_Executar()\par
00042 \{\par
00043     pressionar(VK_MEDIA_PLAY_PAUSE);\par
00044     soltar(VK_MEDIA_PLAY_PAUSE);\par
00045 \}\par
00046 \par
00047 std::string reproducao::Retornar_nome()\{\par
00048     {\cf19 return} _musica_escolhida;\par
00049 \}\par
00050 {\cf18 void} reproducao::Pular_p_frente({\cf17 const} std::string& nomeArquivo) \{\par
00051 \par
00052     {\cf20 /*Fechar o navegador*/}\par
00053     Encerrar();\par
00054 \par
00055     std::map<std::string, std::string> mapa2 = ler_arquivo_em_map(nomeArquivo);\par
00056 \par
00057     {\cf19 if} (posicaoAtual >= 0 && posicaoAtual < mapa2.size() - 1) \{\par
00058         {\cf17 auto} it = mapa2.begin();\par
00059         std::advance(it, posicaoAtual + 1);\par
00060         std::string link = it->second;\par
00061         _musica_escolhida = it->first;\par
00062         std::cout << {\cf22 "Pulando para o musica posterior: "} << it->first << std::endl;\par
00063 \par
00064         Sleep(5000);\par
00065 \par
00066         {\cf20 /*Converter a string para o tipo LPCWSTR*/}\par
00067         std::wstring linkWide(link.begin(), link.end());\par
00068         LPCWSTR linkLpcwstr = linkWide.c_str();\par
00069 \par
00070         {\cf20 /*Abrir o link da musica usando o ShellExecuteEx*/}\par
00071         SHELLEXECUTEINFO sei;\par
00072         ZeroMemory(&sei, {\cf17 sizeof}(sei));\par
00073         sei.cbSize = {\cf17 sizeof}(sei);\par
00074         sei.fMask = SEE_MASK_FLAG_DDEWAIT | SEE_MASK_FLAG_NO_UI;\par
00075         sei.lpVerb = L{\cf22 "open"};\par
00076         sei.lpFile = linkLpcwstr;\par
00077         sei.nShow = SW_SHOWNORMAL;\par
00078 \par
00079         {\cf19 if} (ShellExecuteEx(&sei)) \{\par
00080             {\cf20 /*Atualizar a posicao atual para a posicao do link posterior*/}\par
00081             posicaoAtual = std::distance(mapa2.begin(), it);\par
00082         \} {\cf19 else} \{\par
00083             std::cout << {\cf22 "Nao foi possivel abrir o link."} << std::endl;\par
00084         \}\par
00085     \} {\cf19 else} \{\par
00086         std::cout << {\cf22 "Nao ha link posterior disponivel."} << std::endl;\par
00087     \}\par
00088 \}\par
00089 \par
00090 {\cf18 void} reproducao::Pular_p_tras({\cf17 const} std::string& nomeArquivo) \{\par
00091 \par
00092     {\cf20 /*Fechar o navegador*/}\par
00093     Encerrar();\par
00094     std::map<std::string, std::string> mapa2 = ler_arquivo_em_map(nomeArquivo);\par
00095 \par
00096     {\cf19 if} (posicaoAtual > 0 && posicaoAtual < mapa2.size()) \{\par
00097         {\cf17 auto} it = mapa2.begin();\par
00098         std::advance(it, posicaoAtual - 1);\par
00099         std::string link = it->second;\par
00100         std::string musica = it->first;\par
00101         std::cout << {\cf22 "Pulando para o muscia anterior: "} << musica << std::endl;\par
00102         _musica_escolhida = it->first;\par
00103         Sleep(5000);\par
00104 \par
00105         {\cf20 /*Converter a string para o tipo LPCWSTR*/}\par
00106         std::wstring linkWide(link.begin(), link.end());\par
00107         LPCWSTR linkLpcwstr = linkWide.c_str();\par
00108 \par
00109         {\cf20 /*Abrir o link da musica anterior usando o ShellExecuteEx*/}\par
00110         SHELLEXECUTEINFO sei;\par
00111         ZeroMemory(&sei, {\cf17 sizeof}(sei));\par
00112         sei.cbSize = {\cf17 sizeof}(sei);\par
00113         sei.fMask = SEE_MASK_FLAG_DDEWAIT | SEE_MASK_FLAG_NO_UI;\par
00114         sei.lpVerb = L{\cf22 "open"};\par
00115         sei.lpFile = linkLpcwstr;\par
00116         sei.nShow = SW_SHOWNORMAL;\par
00117 \par
00118         {\cf19 if} (ShellExecuteEx(&sei)) \{\par
00119             {\cf20 /*Atualizar a posicao atual para a posicao do link anterior*/}\par
00120             posicaoAtual = std::distance(mapa2.begin(), it);\par
00121         \} {\cf19 else} \{\par
00122             std::cout << {\cf22 "Nao foi possivel abrir o link."} << std::endl;\par
00123         \}\par
00124     \} {\cf19 else} \{\par
00125         std::cout << {\cf22 "Nao ha link anterior disponivel."} << std::endl;\par
00126     \}\par
00127 \}\par
00128 \par
00129 \par
00130 std::map<std::string, std::string> reproducao::ler_arquivo_em_map({\cf17 const} std::string& nomeArquivo)\par
00131 \{\par
00132     std::map<std::string, std::string> mapa2;\par
00133     std::ifstream arquivo(nomeArquivo);\par
00134     {\cf19 if} (arquivo.is_open())\par
00135     \{\par
00136         std::string linha;\par
00137         {\cf19 while} (std::getline(arquivo, linha))\par
00138         \{\par
00139             {\cf19 if}(!linha.empty())\{\par
00140                 linha[0] = std::toupper(linha[0]);\par
00141                 {\cf19 for}({\cf18 unsigned} i=1; i < linha.size(); i++)\{\par
00142 \par
00143                     {\cf19 if}(linha[i] == {\cf23 ','})\{\par
00144                         {\cf19 break};\par
00145                     \}\par
00146                     {\cf19 else}\{\par
00147                         {\cf19 if} (linha[i-1] == {\cf23 ' '}) \{\par
00148                             linha[i] = std::toupper(linha[i]);\par
00149                         \}{\cf19 else}\{\par
00150                             linha[i] = std::tolower(linha[i]);\par
00151                         \}\par
00152                     \}\par
00153                 \}   \par
00154             \}\par
00155             {\cf20 //converte as letras ap\'F3s o espa\'E7o para maiuscula.}\par
00156             {\cf18 size_t} pos = linha.find({\cf23 ','});\par
00157             {\cf19 if} (pos != std::string::npos)\par
00158             \{\par
00159                 std::string musica = linha.substr(0, pos);\par
00160                 std::string link = linha.substr(pos + 1);\par
00161                 mapa2[musica] = link;\par
00162             \}\par
00163         \}\par
00164         arquivo.close();\par
00165         std::cout << {\cf22 "Dados lidos com sucesso do arquivo."} << std::endl;\par
00166     \}\par
00167     {\cf19 else}\par
00168     \{\par
00169         std::cout << {\cf22 "Arquivo nao encontrado. Sera criado um novo arquivo."} << std::endl;\par
00170     \}\par
00171 \par
00172     {\cf19 return} mapa2;\par
00173 \}\par
00174 \par
00175 BOOL CALLBACK EnumWindowsCallback(HWND hWnd, LPARAM lParam)\par
00176 \{\par
00177     {\cf20 /*Verificar se a janela pertence a um navegador*/}\par
00178     TCHAR className[256];\par
00179     {\cf19 if} (GetClassName(hWnd, className, 256))\par
00180     \{\par
00181         {\cf19 if} (_tcscmp(className, _T({\cf22 "Chrome_WidgetWin_1"})) == 0 ||\par
00182             _tcscmp(className, _T({\cf22 "MozillaWindowClass"})) == 0 ||\par
00183             _tcscmp(className, _T({\cf22 "IEFrame"})) == 0 ||\par
00184             _tcscmp(className, _T({\cf22 "ApplicationFrameWindow"})) == 0 ||\par
00185             _tcscmp(className, _T({\cf22 "MicrosoftEdgeWindowClass"})) == 0)\par
00186         \{\par
00187             {\cf20 /*Verificar se o titulo da janela corresponde ao Visual Studio Code*/}\par
00188             TCHAR windowTitle[256];\par
00189             {\cf19 if} (GetWindowText(hWnd, windowTitle, 256) > 0)\par
00190             \{\par
00191                 {\cf19 if} (_tcsstr(windowTitle, _T({\cf22 "Visual Studio Code"})) != {\cf17 nullptr})\par
00192                 \{\par
00193                     {\cf20 /*Pular esta janela e continuar para a proxima*/}\par
00194                     {\cf19 return} TRUE;\par
00195                 \}\par
00196             \}\par
00197 \par
00198             {\cf20 /*Enviar mensagem de fechamento para a janela*/}\par
00199             SendMessage(hWnd, WM_CLOSE, 0, 0);\par
00200         \}\par
00201     \}\par
00202 \par
00203     {\cf19 return} TRUE;\par
00204 \}\par
00205 \par
00206 {\cf18 void} reproducao::Encerrar()\par
00207 \{\par
00208     {\cf20 /*Enumerar todas as janelas abertas*/}\par
00209     EnumWindows(EnumWindowsCallback, 0);\par
00210 \}\par
00211 \par
00212 {\cf18 void} reproducao::pressionar(WORD keyCode)\par
00213 \{\par
00214     INPUT input;\par
00215     input.type = INPUT_KEYBOARD;\par
00216     input.ki.wVk = keyCode;\par
00217     input.ki.dwFlags = 0;\par
00218     input.ki.time = 0;\par
00219     input.ki.dwExtraInfo = 0;\par
00220 \par
00221     SendInput(1, &input, {\cf17 sizeof}(INPUT));\par
00222 \}\par
00223 \par
00224 {\cf18 void} reproducao::soltar(WORD keyCode)\par
00225 \{\par
00226     INPUT input;\par
00227     input.type = INPUT_KEYBOARD;\par
00228     input.ki.wVk = keyCode;\par
00229     input.ki.dwFlags = KEYEVENTF_KEYUP;\par
00230     input.ki.time = 0;\par
00231     input.ki.dwExtraInfo = 0;\par
00232 \par
00233     SendInput(1, &input, {\cf17 sizeof}(INPUT));\par
00234 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo git hub/Projeto_Stream/reproducao.hpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/reproducao.hpp}
{\xe \v git hub/Projeto_Stream/reproducao.hpp}
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <string>}\par
{\f2 #include <fstream>}\par
{\f2 #include <iostream>}\par
{\f2 #include <windows.h>}\par
{\f2 #include <shellapi.h>}\par
{\f2 #include <map>}\par
{\f2 #include <tlhelp32.h>}\par
{\f2 #include <cstdlib>}\par
{\f2 #include <tchar.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b reproducao}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe respons\'E1vel pela reprodu\'E7\'E3o das m\'FAsicas. }}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es e Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b UNICODE}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es e macros\par
\pard\plain 
{\xe \v UNICODE\:reproducao.hpp}
{\xe \v reproducao.hpp\:UNICODE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define UNICODE}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 2} do arquivo {\b reproducao.hpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
reproducao.hpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/reproducao.hpp}
{\xe \v git hub/Projeto_Stream/reproducao.hpp}
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
Ir para a documenta\'E7\'E3o desse arquivo.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf21 #define UNICODE}\par
00003 {\cf21 #include <string>}\par
00004 {\cf21 #include <fstream>}\par
00005 {\cf21 #include <iostream>}\par
00006 {\cf21 #include <windows.h>}\par
00007 {\cf21 #include <shellapi.h>}\par
00008 {\cf21 #include <map>}\par
00009 {\cf21 #include <tlhelp32.h>}\par
00010 {\cf21 #include <cstdlib>}\par
00011 {\cf21 #include <tchar.h>}\par
00012 \par
00014 {\cf17 class }reproducao\par
00015 \{\par
00016 {\cf17 private}:\par
00017     {\cf18 unsigned} posicaoAtual;\par
00018 \par
00019 {\cf17 public}:\par
00020     reproducao();\par
00025     {\cf18 void} Executar({\cf17 const} std::string& nomeArquivo, std::string nome_musica);\par
00027     {\cf18 void} Parar_Executar();\par
00031     {\cf18 void} Pular_p_frente({\cf17 const} std::string& nomeArquivo);\par
00035     {\cf18 void} Pular_p_tras({\cf17 const} std::string& nomeArquivo);\par
00037     {\cf18 void} Encerrar();\par
00041     std::string Retornar_nome();\par
00042 \par
00043 {\cf17 private}:\par
00048     {\cf17 static} std::map<std::string, std::string> ler_arquivo_em_map({\cf17 const} std::string& nomeArquivo);\par
00052     {\cf17 static} {\cf18 void} pressionar(WORD keyCode);\par
00056     {\cf17 static} {\cf18 void} soltar(WORD keyCode);\par
00058     std::string _musica_escolhida;\par
00059 \};\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo git hub/Projeto_Stream/testes.cpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/testes.cpp}
{\xe \v git hub/Projeto_Stream/testes.cpp}
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "cadastrousuario.hpp"}\par
{\f2 #include "feedback.hpp"}\par
{\f2 #include "reproducao.hpp"}\par
{\f2 #include "musicas.hpp"}\par
{\f2 #include <iostream>}\par
{\f2 #include <string>}\par
{\f2 #include <fstream>}\par
{\f2 #include <vector>}\par
{\f2 #include "doctest.h"}\par
{\f2 #include "pesquisa.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es e Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("hashSenha gerando hash corretamente")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Login bem sucedido")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Signup criando novo usu\'E1rio")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("ChangeUsername trocando nome")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("DeleteAccount apagando conta")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Teste da classe Comentario")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Teste da classe Curtida")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Pesquisa::Pesquisar")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Teste da classe reproducao")\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es e macros\par
\pard\plain 
{\xe \v DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN\:testes.cpp}
{\xe \v testes.cpp\:DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 1} do arquivo {\b testes.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v TEST_CASE\:testes.cpp}
{\xe \v testes.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("ChangeUsername trocando nome" )}}
\par
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 82} do arquivo {\b testes.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00082                                           \{\par
00083 \par
00084     ChangeUsername changeUsername;\par
00085 \par
00086     \par
00087     std::ofstream testFile({\cf22 "usuariosenha.txt"});\par
00088     testFile << {\cf22 "currentuser\\n"} << hashSenha({\cf22 "password"}) << {\cf22 "\\n"};\par
00089     testFile.close();\par
00090 \par
00091     \par
00092     std::istringstream input({\cf22 "currentuser\\npassword\\nnewuser\\n"});\par
00093 \par
00094  \par
00095     std::streambuf* oldCinBuffer = std::cin.rdbuf(input.rdbuf());\par
00096 \par
00097     \par
00098     changeUsername.change_username();\par
00099 \par
00100     \par
00101     std::cin.rdbuf(oldCinBuffer);\par
00102 \par
00103     \par
00104     std::ifstream userFile({\cf22 "usuariosenha.txt"});\par
00105     std::string username, password;\par
00106 \par
00107     {\cf18 bool} usernameUpdated = {\cf17 false};\par
00108     {\cf19 while} (getline(userFile, username) && getline(userFile, password)) \{\par
00109         {\cf19 if} (username == {\cf22 "newuser"}) \{\par
00110             usernameUpdated = {\cf17 true};\par
00111             {\cf19 break};\par
00112         \}\par
00113     \}\par
00114 \par
00115     CHECK(usernameUpdated);\par
00116 \}\par
}
}
{\xe \v TEST_CASE\:testes.cpp}
{\xe \v testes.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("DeleteAccount apagando conta" )}}
\par
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 119} do arquivo {\b testes.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00119                                           \{\par
00120     \par
00121     DeleteAccount deleteAccount;\par
00122 \par
00123     \par
00124     std::ofstream testFile({\cf22 "usuariosenha.txt"});\par
00125     testFile << {\cf22 "existinguser\\n"} << hashSenha({\cf22 "password"}) << {\cf22 "\\n"};\par
00126     testFile.close();\par
00127 \par
00128     \par
00129     std::istringstream input({\cf22 "existinguser\\npassword\\n"});\par
00130     std::streambuf* oldCinBuffer = std::cin.rdbuf(input.rdbuf());\par
00131 \par
00132     \par
00133     deleteAccount.delete_account();\par
00134 \par
00135     \par
00136     std::cin.rdbuf(oldCinBuffer);\par
00137 \par
00138   \par
00139     std::ifstream userFile({\cf22 "usuariosenha.txt"});\par
00140     std::string username, password;\par
00141 \par
00142     {\cf18 bool} userExists = {\cf17 false};\par
00143     {\cf19 while} (getline(userFile, username) && getline(userFile, password)) \{\par
00144         {\cf19 if} (username == {\cf22 "existinguser"} && password == hashSenha({\cf22 "password"})) \{\par
00145             userExists = {\cf17 true};\par
00146             {\cf19 break};\par
00147         \}\par
00148     \}\par
00149 \par
00150     CHECK(!userExists);\par
00151 \}\par
}
}
{\xe \v TEST_CASE\:testes.cpp}
{\xe \v testes.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("hashSenha gerando hash corretamente" )}}
\par
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 13} do arquivo {\b testes.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00013                                                  \{\par
00014     std::string password = {\cf22 "password123"};\par
00015     std::string expectedHash = {\cf22 "123456789"}; \par
00016     \par
00017     std::string actualHash = hashSenha(password);\par
00018 \par
00019     CHECK(actualHash == expectedHash);\par
00020 \}\par
}
}
{\xe \v TEST_CASE\:testes.cpp}
{\xe \v testes.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Login bem sucedido" )}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 23} do arquivo {\b testes.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00023                                 \{\par
00024     \par
00025     Login login;\par
00026 \par
00027   \par
00028     std::ofstream testFile({\cf22 "usuariosenha.txt"});\par
00029     testFile << {\cf22 "username\\n"} << hashSenha({\cf22 "password"}) << {\cf22 "\\n"};\par
00030     testFile.close();\par
00031 \par
00032     \par
00033     std::istringstream input({\cf22 "username\\npassword\\n"});\par
00034 \par
00035     \par
00036     std::streambuf* oldCinBuffer = std::cin.rdbuf(input.rdbuf());\par
00037 \par
00038   \par
00039     login.login();\par
00040 \par
00041     \par
00042     std::cin.rdbuf(oldCinBuffer);\par
00043 \par
00044    \par
00045     CHECK(login.getternomedeusuario() == {\cf22 "username"});\par
00046 \}\par
}
}
{\xe \v TEST_CASE\:testes.cpp}
{\xe \v testes.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Pesquisa::Pesquisar" )}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 257} do arquivo {\b testes.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00257                                \{\par
00258     SUBCASE({\cf22 "Encontrar"}) \{\par
00259         Pesquisa::Pesquisar busca({\cf22 "musica"});\par
00260         {\cf18 bool} resultado = busca.Encontrar();\par
00261         CHECK(resultado == {\cf17 true});\par
00262         std::string musicaEscolhida = busca.Retorno_Pesquisa();\par
00263         CHECK(!musicaEscolhida.empty());\par
00264     \}\par
00265 \par
00266     SUBCASE({\cf22 "N\'E3o Encontrar"}) \{\par
00267         Pesquisa::Pesquisar busca({\cf22 "xyz"});\par
00268         {\cf18 bool} resultado = busca.Encontrar();\par
00269         CHECK(resultado == {\cf17 false});\par
00270         std::string musicaEscolhida = busca.Retorno_Pesquisa();\par
00271         CHECK(musicaEscolhida.empty());\par
00272     \}\par
00273 \}\par
}
}
{\xe \v TEST_CASE\:testes.cpp}
{\xe \v testes.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Signup criando novo usu\'E1rio" )}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 50} do arquivo {\b testes.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00050                                           \{\par
00051  \par
00052     Signup signup;\par
00053 \par
00054     std::istringstream input({\cf22 "newuser\\npassword\\npassword\\n"});\par
00055 \par
00056    \par
00057     std::streambuf* oldCinBuffer = std::cin.rdbuf(input.rdbuf());\par
00058 \par
00059   \par
00060     signup.sign_up();\par
00061 \par
00062     \par
00063     std::cin.rdbuf(oldCinBuffer);\par
00064 \par
00065   \par
00066     std::ifstream userFile({\cf22 "usuariosenha.txt"});\par
00067     std::string username, password;\par
00068 \par
00069     {\cf18 bool} userExists = {\cf17 false};\par
00070     {\cf19 while} (getline(userFile, username) && getline(userFile, password)) \{\par
00071         {\cf19 if} (username == {\cf22 "newuser"} && password == hashSenha({\cf22 "password"})) \{\par
00072             userExists = {\cf17 true};\par
00073             {\cf19 break};\par
00074         \}\par
00075     \}\par
00076 \par
00077     CHECK(userExists);\par
00078 \}\par
}
}
{\xe \v TEST_CASE\:testes.cpp}
{\xe \v testes.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Teste da classe Comentario" )}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 156} do arquivo {\b testes.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00156                                         \{\par
00157 \par
00158     Comentario comentario;\par
00159     std::string musica = {\cf22 "Nome da Musica"};\par
00160     std::string usuario = {\cf22 "Nome do Usuario"};\par
00161 \par
00162     SUBCASE({\cf22 "Teste do m\'E9todo Fazer_comentario"}) \{\par
00163 \par
00164         comentario.Fazer_comentario(musica, usuario);\par
00165         {\cf20 // Verifique se o arquivo "FeedBack.txt" foi criado e se o coment\'E1rio foi registrado corretamente}\par
00166         std::ifstream arquivo({\cf22 "FeedBack.txt"});\par
00167         std::string linha;\par
00168         {\cf18 bool} comentarioEncontrado = {\cf17 false};\par
00169         {\cf19 while} (getline(arquivo, linha)) \{\par
00170             {\cf19 if} (linha.find(musica) != std::string::npos && linha.find(usuario) != std::string::npos) \{\par
00171                 comentarioEncontrado = {\cf17 true};\par
00172                 {\cf19 break};\par
00173             \}\par
00174         \}\par
00175         arquivo.close();\par
00176         CHECK(comentarioEncontrado);\par
00177     \}\par
00178 \par
00179     SUBCASE({\cf22 "Teste do m\'E9todo Ler_comentario"}) \{\par
00180         \par
00181         comentario.Ler_comentario(musica, usuario);\par
00182         {\cf20 // Verifique se os coment\'E1rios s\'E3o lidoscorretamente do arquivo "FeedBack.txt"}\par
00183         {\cf20 // Para testar isso usando a biblioteca doctest, voc\'EA pode usar capturar a sa\'EDda do cout e verificar se ela cont\'E9m os coment\'E1rios esperados}\par
00184         {\cf20 // Aqui est\'E1 um exemplo simplificado:}\par
00185         std::stringstream output;\par
00186         std::streambuf* coutBuffer = std::cout.rdbuf();\par
00187         std::cout.rdbuf(output.rdbuf()); {\cf20 // Redireciona a sa\'EDda do cout para o stringstream}\par
00188         comentario.Ler_comentario(musica, usuario);\par
00189         std::cout.rdbuf(coutBuffer); {\cf20 // Restaura o buffer de sa\'EDda padr\'E3o}\par
00190 \par
00191         {\cf20 // Verifique se a sa\'EDda cont\'E9m os coment\'E1rios esperados}\par
00192         std::string outputStr = output.str();\par
00193         CHECK(outputStr.find({\cf22 "Comentarios encontrados:"}) != std::string::npos);\par
00194         CHECK(outputStr.find({\cf22 "Nome do Comentario"}) != std::string::npos);\par
00195     \}\par
00196 \}\par
}
}
{\xe \v TEST_CASE\:testes.cpp}
{\xe \v testes.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Teste da classe Curtida" )}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 198} do arquivo {\b testes.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00198                                      \{\par
00199 \par
00200     Curtida curtida;\par
00201     std::string musica = {\cf22 "Nome da Musica"};\par
00202     std::string usuario = {\cf22 "Nome do Usuario"};\par
00203 \par
00204     SUBCASE({\cf22 "Teste do m\'E9todo like"}) \{\par
00205 \par
00206         curtida.like(musica, usuario);\par
00207         {\cf20 // Verifique se o arquivo "Curtidas.txt" foi criado e se o like foi registrado corretamente}\par
00208         std::ifstream arquivo({\cf22 "Curtidas.txt"});\par
00209         std::string linha;\par
00210         {\cf18 bool} likeEncontrado = {\cf17 false};\par
00211         {\cf19 while} (getline(arquivo, linha)) \{\par
00212             {\cf19 if} (linha.find(musica) != std::string::npos && linha.find(usuario) != std::string::npos && linha.find({\cf22 "Like"}) != std::string::npos) \{\par
00213                 likeEncontrado = {\cf17 true};\par
00214                 {\cf19 break};\par
00215             \}\par
00216         \}\par
00217         arquivo.close();\par
00218         CHECK(likeEncontrado);\par
00219     \}\par
00220 \par
00221     SUBCASE({\cf22 "Teste do m\'E9todo dislike"}) \{\par
00222 \par
00223         curtida.dislike(musica, usuario);\par
00224         {\cf20 // Verifique se o arquivo "Curtidas.txt" foi criado e se o dislike foi registrado corretamente}\par
00225         std::ifstream arquivo({\cf22 "Curtidas.txt"});\par
00226         std::string linha;\par
00227         {\cf18 bool} dislikeEncontrado = {\cf17 false};\par
00228         {\cf19 while} (getline(arquivo, linha)) \{\par
00229             {\cf19 if} (linha.find(musica) != std::string::npos && linha.find(usuario) != std::string::npos && linha.find({\cf22 "Dislike"}) != std::string::npos) \{\par
00230                 dislikeEncontrado = {\cf17 true};\par
00231                 {\cf19 break};\par
00232             \}\par
00233         \}\par
00234         arquivo.close();\par
00235         CHECK(dislikeEncontrado);\par
00236     \}\par
00237 \par
00238     SUBCASE({\cf22 "Teste do m\'E9todo ver_quatidade_curtias"}) \{\par
00239 \par
00240         curtida.ver_quatidade_curtias(musica);\par
00241         {\cf20 // Verifique se a quantidade de likes e dislikes \'E9 exibida corretamente}\par
00242         {\cf20 // Para testar isso usando a biblioteca doctest, voc\'EA pode usar capturar a sa\'EDda do cout e verificar se ela cont\'E9m as informa\'E7\'F5es esperadas}\par
00243         {\cf20 // Aqui est\'E1 um exemplo simplificado:}\par
00244         std::stringstream output;\par
00245         std::streambuf* coutBuffer = std::cout.rdbuf();\par
00246         std::cout.rdbuf(output.rdbuf()); {\cf20 // Redireciona a sa\'EDda do cout para o stringstream}\par
00247         curtida.ver_quatidade_curtias(musica);\par
00248         std::cout.rdbuf(coutBuffer); {\cf20 // Restaura o buffer de sa\'EDda padr\'E3o}\par
00249 \par
00250         {\cf20 // Verifique se a sa\'EDda cont\'E9m as informa\'E7\'F5es esperadas}\par
00251         std::string outputStr = output.str();\par
00252         CHECK(outputStr.find({\cf22 "Quantidade de likes:"}) != std::string::npos);\par
00253         CHECK(outputStr.find({\cf22 "Quantidade de dislikes:"}) != std::string::npos);\par
00254     \}\par
00255 \}\par
}
}
{\xe \v TEST_CASE\:testes.cpp}
{\xe \v testes.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Teste da classe reproducao" )}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 274} do arquivo {\b testes.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00274                                         \{\par
00275 \par
00276     reproducao player;\par
00277 \par
00278     SUBCASE({\cf22 "Teste do m\'E9todo Executar"}) \{\par
00279 \par
00280         std::string nomeArquivo = {\cf22 "musicas.txt"};\par
00281         std::string nomeMusica = {\cf22 "Nome da Musica"};\par
00282 \par
00283         player.Executar(nomeArquivo, nomeMusica);\par
00284         {\cf20 // Verifique se a m\'FAsica correta foi aberta para reprodu\'E7\'E3o}\par
00285         {\cf20 // Voc\'EA pode verificar se o estado interno da classe reproducao \'E9 atualizado corretamente,}\par
00286         {\cf20 // como a posi\'E7\'E3o atual e a m\'FAsica escolhida}\par
00287         {\cf20 // Por exemplo, voc\'EA pode adicionar uma m\'FAsica ao arquivo "musicas.txt" e verificar se a m\'FAsica \'E9 executada corretamente}\par
00288         {\cf20 // usando m\'E9todos auxiliares para verificar o estado interno da classe reproducao}\par
00289         CHECK(player.Retornar_nome() == nomeMusica); {\cf20 // Substitua "nomeMusica" pelo nome correto da m\'FAsica a ser verificada}\par
00290     \}\par
00291 \par
00292     SUBCASE({\cf22 "Teste do m\'E9todo Pular_p_frente"}) \{\par
00293 \par
00294         std::string nomeArquivo = {\cf22 "musicas.txt"};\par
00295 \par
00296         player.Pular_p_frente(nomeArquivo);\par
00297 \par
00298         CHECK(player.Retornar_nome() == {\cf22 "Nova Musica"}); \par
00299     \}\par
00300 \par
00301     SUBCASE({\cf22 "Teste do m\'E9todo Pular_p_tras"}) \{\par
00302 \par
00303         std::string nomeArquivo = {\cf22 "musicas.txt"};\par
00304 \par
00305         player.Pular_p_tras(nomeArquivo);\par
00306         CHECK(player.Retornar_nome() == {\cf22 "Musica Anterior"}); \par
00307     \}\par
00308 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testes.cpp\par \pard\plain 
{\tc\tcl2 \v git hub/Projeto_Stream/testes.cpp}
{\xe \v git hub/Projeto_Stream/testes.cpp}
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
Ir para a documenta\'E7\'E3o desse arquivo.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}\par
00002 {\cf21 #include "cadastrousuario.hpp"}\par
00003 {\cf21 #include "feedback.hpp"}\par
00004 {\cf21 #include "reproducao.hpp"}\par
00005 {\cf21 #include "musicas.hpp"}\par
00006 {\cf21 #include <iostream>}\par
00007 {\cf21 #include <string>}\par
00008 {\cf21 #include <fstream>}\par
00009 {\cf21 #include <vector>}\par
00010 {\cf21 #include "doctest.h"}\par
00011 {\cf21 #include "pesquisa.hpp"}\par
00012 \par
00013 TEST_CASE({\cf22 "hashSenha gerando hash corretamente"}) \{\par
00014     std::string password = {\cf22 "password123"};\par
00015     std::string expectedHash = {\cf22 "123456789"}; \par
00016     \par
00017     std::string actualHash = hashSenha(password);\par
00018 \par
00019     CHECK(actualHash == expectedHash);\par
00020 \}\par
00021 \par
00022 \par
00023 TEST_CASE({\cf22 "Login bem sucedido"}) \{\par
00024     \par
00025     Login login;\par
00026 \par
00027   \par
00028     std::ofstream testFile({\cf22 "usuariosenha.txt"});\par
00029     testFile << {\cf22 "username\\n"} << hashSenha({\cf22 "password"}) << {\cf22 "\\n"};\par
00030     testFile.close();\par
00031 \par
00032     \par
00033     std::istringstream input({\cf22 "username\\npassword\\n"});\par
00034 \par
00035     \par
00036     std::streambuf* oldCinBuffer = std::cin.rdbuf(input.rdbuf());\par
00037 \par
00038   \par
00039     login.login();\par
00040 \par
00041     \par
00042     std::cin.rdbuf(oldCinBuffer);\par
00043 \par
00044    \par
00045     CHECK(login.getternomedeusuario() == {\cf22 "username"});\par
00046 \}\par
00047 \par
00048 \par
00049 \par
00050 TEST_CASE({\cf22 "Signup criando novo usu\'E1rio"}) \{\par
00051  \par
00052     Signup signup;\par
00053 \par
00054     std::istringstream input({\cf22 "newuser\\npassword\\npassword\\n"});\par
00055 \par
00056    \par
00057     std::streambuf* oldCinBuffer = std::cin.rdbuf(input.rdbuf());\par
00058 \par
00059   \par
00060     signup.sign_up();\par
00061 \par
00062     \par
00063     std::cin.rdbuf(oldCinBuffer);\par
00064 \par
00065   \par
00066     std::ifstream userFile({\cf22 "usuariosenha.txt"});\par
00067     std::string username, password;\par
00068 \par
00069     {\cf18 bool} userExists = {\cf17 false};\par
00070     {\cf19 while} (getline(userFile, username) && getline(userFile, password)) \{\par
00071         {\cf19 if} (username == {\cf22 "newuser"} && password == hashSenha({\cf22 "password"})) \{\par
00072             userExists = {\cf17 true};\par
00073             {\cf19 break};\par
00074         \}\par
00075     \}\par
00076 \par
00077     CHECK(userExists);\par
00078 \}\par
00079 \par
00080 \par
00081 \par
00082 TEST_CASE({\cf22 "ChangeUsername trocando nome"}) \{\par
00083 \par
00084     ChangeUsername changeUsername;\par
00085 \par
00086     \par
00087     std::ofstream testFile({\cf22 "usuariosenha.txt"});\par
00088     testFile << {\cf22 "currentuser\\n"} << hashSenha({\cf22 "password"}) << {\cf22 "\\n"};\par
00089     testFile.close();\par
00090 \par
00091     \par
00092     std::istringstream input({\cf22 "currentuser\\npassword\\nnewuser\\n"});\par
00093 \par
00094  \par
00095     std::streambuf* oldCinBuffer = std::cin.rdbuf(input.rdbuf());\par
00096 \par
00097     \par
00098     changeUsername.change_username();\par
00099 \par
00100     \par
00101     std::cin.rdbuf(oldCinBuffer);\par
00102 \par
00103     \par
00104     std::ifstream userFile({\cf22 "usuariosenha.txt"});\par
00105     std::string username, password;\par
00106 \par
00107     {\cf18 bool} usernameUpdated = {\cf17 false};\par
00108     {\cf19 while} (getline(userFile, username) && getline(userFile, password)) \{\par
00109         {\cf19 if} (username == {\cf22 "newuser"}) \{\par
00110             usernameUpdated = {\cf17 true};\par
00111             {\cf19 break};\par
00112         \}\par
00113     \}\par
00114 \par
00115     CHECK(usernameUpdated);\par
00116 \}\par
00117 \par
00118 \par
00119 TEST_CASE({\cf22 "DeleteAccount apagando conta"}) \{\par
00120     \par
00121     DeleteAccount deleteAccount;\par
00122 \par
00123     \par
00124     std::ofstream testFile({\cf22 "usuariosenha.txt"});\par
00125     testFile << {\cf22 "existinguser\\n"} << hashSenha({\cf22 "password"}) << {\cf22 "\\n"};\par
00126     testFile.close();\par
00127 \par
00128     \par
00129     std::istringstream input({\cf22 "existinguser\\npassword\\n"});\par
00130     std::streambuf* oldCinBuffer = std::cin.rdbuf(input.rdbuf());\par
00131 \par
00132     \par
00133     deleteAccount.delete_account();\par
00134 \par
00135     \par
00136     std::cin.rdbuf(oldCinBuffer);\par
00137 \par
00138   \par
00139     std::ifstream userFile({\cf22 "usuariosenha.txt"});\par
00140     std::string username, password;\par
00141 \par
00142     {\cf18 bool} userExists = {\cf17 false};\par
00143     {\cf19 while} (getline(userFile, username) && getline(userFile, password)) \{\par
00144         {\cf19 if} (username == {\cf22 "existinguser"} && password == hashSenha({\cf22 "password"})) \{\par
00145             userExists = {\cf17 true};\par
00146             {\cf19 break};\par
00147         \}\par
00148     \}\par
00149 \par
00150     CHECK(!userExists);\par
00151 \}\par
00152 \par
00153 \par
00154 \par
00155 \par
00156 TEST_CASE({\cf22 "Teste da classe Comentario"}) \{\par
00157 \par
00158     Comentario comentario;\par
00159     std::string musica = {\cf22 "Nome da Musica"};\par
00160     std::string usuario = {\cf22 "Nome do Usuario"};\par
00161 \par
00162     SUBCASE({\cf22 "Teste do m\'E9todo Fazer_comentario"}) \{\par
00163 \par
00164         comentario.Fazer_comentario(musica, usuario);\par
00165         {\cf20 // Verifique se o arquivo "FeedBack.txt" foi criado e se o coment\'E1rio foi registrado corretamente}\par
00166         std::ifstream arquivo({\cf22 "FeedBack.txt"});\par
00167         std::string linha;\par
00168         {\cf18 bool} comentarioEncontrado = {\cf17 false};\par
00169         {\cf19 while} (getline(arquivo, linha)) \{\par
00170             {\cf19 if} (linha.find(musica) != std::string::npos && linha.find(usuario) != std::string::npos) \{\par
00171                 comentarioEncontrado = {\cf17 true};\par
00172                 {\cf19 break};\par
00173             \}\par
00174         \}\par
00175         arquivo.close();\par
00176         CHECK(comentarioEncontrado);\par
00177     \}\par
00178 \par
00179     SUBCASE({\cf22 "Teste do m\'E9todo Ler_comentario"}) \{\par
00180         \par
00181         comentario.Ler_comentario(musica, usuario);\par
00182         {\cf20 // Verifique se os coment\'E1rios s\'E3o lidoscorretamente do arquivo "FeedBack.txt"}\par
00183         {\cf20 // Para testar isso usando a biblioteca doctest, voc\'EA pode usar capturar a sa\'EDda do cout e verificar se ela cont\'E9m os coment\'E1rios esperados}\par
00184         {\cf20 // Aqui est\'E1 um exemplo simplificado:}\par
00185         std::stringstream output;\par
00186         std::streambuf* coutBuffer = std::cout.rdbuf();\par
00187         std::cout.rdbuf(output.rdbuf()); {\cf20 // Redireciona a sa\'EDda do cout para o stringstream}\par
00188         comentario.Ler_comentario(musica, usuario);\par
00189         std::cout.rdbuf(coutBuffer); {\cf20 // Restaura o buffer de sa\'EDda padr\'E3o}\par
00190 \par
00191         {\cf20 // Verifique se a sa\'EDda cont\'E9m os coment\'E1rios esperados}\par
00192         std::string outputStr = output.str();\par
00193         CHECK(outputStr.find({\cf22 "Comentarios encontrados:"}) != std::string::npos);\par
00194         CHECK(outputStr.find({\cf22 "Nome do Comentario"}) != std::string::npos);\par
00195     \}\par
00196 \}\par
00197 \par
00198 TEST_CASE({\cf22 "Teste da classe Curtida"}) \{\par
00199 \par
00200     Curtida curtida;\par
00201     std::string musica = {\cf22 "Nome da Musica"};\par
00202     std::string usuario = {\cf22 "Nome do Usuario"};\par
00203 \par
00204     SUBCASE({\cf22 "Teste do m\'E9todo like"}) \{\par
00205 \par
00206         curtida.like(musica, usuario);\par
00207         {\cf20 // Verifique se o arquivo "Curtidas.txt" foi criado e se o like foi registrado corretamente}\par
00208         std::ifstream arquivo({\cf22 "Curtidas.txt"});\par
00209         std::string linha;\par
00210         {\cf18 bool} likeEncontrado = {\cf17 false};\par
00211         {\cf19 while} (getline(arquivo, linha)) \{\par
00212             {\cf19 if} (linha.find(musica) != std::string::npos && linha.find(usuario) != std::string::npos && linha.find({\cf22 "Like"}) != std::string::npos) \{\par
00213                 likeEncontrado = {\cf17 true};\par
00214                 {\cf19 break};\par
00215             \}\par
00216         \}\par
00217         arquivo.close();\par
00218         CHECK(likeEncontrado);\par
00219     \}\par
00220 \par
00221     SUBCASE({\cf22 "Teste do m\'E9todo dislike"}) \{\par
00222 \par
00223         curtida.dislike(musica, usuario);\par
00224         {\cf20 // Verifique se o arquivo "Curtidas.txt" foi criado e se o dislike foi registrado corretamente}\par
00225         std::ifstream arquivo({\cf22 "Curtidas.txt"});\par
00226         std::string linha;\par
00227         {\cf18 bool} dislikeEncontrado = {\cf17 false};\par
00228         {\cf19 while} (getline(arquivo, linha)) \{\par
00229             {\cf19 if} (linha.find(musica) != std::string::npos && linha.find(usuario) != std::string::npos && linha.find({\cf22 "Dislike"}) != std::string::npos) \{\par
00230                 dislikeEncontrado = {\cf17 true};\par
00231                 {\cf19 break};\par
00232             \}\par
00233         \}\par
00234         arquivo.close();\par
00235         CHECK(dislikeEncontrado);\par
00236     \}\par
00237 \par
00238     SUBCASE({\cf22 "Teste do m\'E9todo ver_quatidade_curtias"}) \{\par
00239 \par
00240         curtida.ver_quatidade_curtias(musica);\par
00241         {\cf20 // Verifique se a quantidade de likes e dislikes \'E9 exibida corretamente}\par
00242         {\cf20 // Para testar isso usando a biblioteca doctest, voc\'EA pode usar capturar a sa\'EDda do cout e verificar se ela cont\'E9m as informa\'E7\'F5es esperadas}\par
00243         {\cf20 // Aqui est\'E1 um exemplo simplificado:}\par
00244         std::stringstream output;\par
00245         std::streambuf* coutBuffer = std::cout.rdbuf();\par
00246         std::cout.rdbuf(output.rdbuf()); {\cf20 // Redireciona a sa\'EDda do cout para o stringstream}\par
00247         curtida.ver_quatidade_curtias(musica);\par
00248         std::cout.rdbuf(coutBuffer); {\cf20 // Restaura o buffer de sa\'EDda padr\'E3o}\par
00249 \par
00250         {\cf20 // Verifique se a sa\'EDda cont\'E9m as informa\'E7\'F5es esperadas}\par
00251         std::string outputStr = output.str();\par
00252         CHECK(outputStr.find({\cf22 "Quantidade de likes:"}) != std::string::npos);\par
00253         CHECK(outputStr.find({\cf22 "Quantidade de dislikes:"}) != std::string::npos);\par
00254     \}\par
00255 \}\par
00256 \par
00257 TEST_CASE({\cf22 "Pesquisa::Pesquisar"}) \{\par
00258     SUBCASE({\cf22 "Encontrar"}) \{\par
00259         Pesquisa::Pesquisar busca({\cf22 "musica"});\par
00260         {\cf18 bool} resultado = busca.Encontrar();\par
00261         CHECK(resultado == {\cf17 true});\par
00262         std::string musicaEscolhida = busca.Retorno_Pesquisa();\par
00263         CHECK(!musicaEscolhida.empty());\par
00264     \}\par
00265 \par
00266     SUBCASE({\cf22 "N\'E3o Encontrar"}) \{\par
00267         Pesquisa::Pesquisar busca({\cf22 "xyz"});\par
00268         {\cf18 bool} resultado = busca.Encontrar();\par
00269         CHECK(resultado == {\cf17 false});\par
00270         std::string musicaEscolhida = busca.Retorno_Pesquisa();\par
00271         CHECK(musicaEscolhida.empty());\par
00272     \}\par
00273 \}\par
00274 TEST_CASE({\cf22 "Teste da classe reproducao"}) \{\par
00275 \par
00276     reproducao player;\par
00277 \par
00278     SUBCASE({\cf22 "Teste do m\'E9todo Executar"}) \{\par
00279 \par
00280         std::string nomeArquivo = {\cf22 "musicas.txt"};\par
00281         std::string nomeMusica = {\cf22 "Nome da Musica"};\par
00282 \par
00283         player.Executar(nomeArquivo, nomeMusica);\par
00284         {\cf20 // Verifique se a m\'FAsica correta foi aberta para reprodu\'E7\'E3o}\par
00285         {\cf20 // Voc\'EA pode verificar se o estado interno da classe reproducao \'E9 atualizado corretamente,}\par
00286         {\cf20 // como a posi\'E7\'E3o atual e a m\'FAsica escolhida}\par
00287         {\cf20 // Por exemplo, voc\'EA pode adicionar uma m\'FAsica ao arquivo "musicas.txt" e verificar se a m\'FAsica \'E9 executada corretamente}\par
00288         {\cf20 // usando m\'E9todos auxiliares para verificar o estado interno da classe reproducao}\par
00289         CHECK(player.Retornar_nome() == nomeMusica); {\cf20 // Substitua "nomeMusica" pelo nome correto da m\'FAsica a ser verificada}\par
00290     \}\par
00291 \par
00292     SUBCASE({\cf22 "Teste do m\'E9todo Pular_p_frente"}) \{\par
00293 \par
00294         std::string nomeArquivo = {\cf22 "musicas.txt"};\par
00295 \par
00296         player.Pular_p_frente(nomeArquivo);\par
00297 \par
00298         CHECK(player.Retornar_nome() == {\cf22 "Nova Musica"}); \par
00299     \}\par
00300 \par
00301     SUBCASE({\cf22 "Teste do m\'E9todo Pular_p_tras"}) \{\par
00302 \par
00303         std::string nomeArquivo = {\cf22 "musicas.txt"};\par
00304 \par
00305         player.Pular_p_tras(nomeArquivo);\par
00306         CHECK(player.Retornar_nome() == {\cf22 "Musica Anterior"}); \par
00307     \}\par
00308 \}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Sum\'E1rio\par 
\pard\plain 
{\tc \v Sum\'E1rio}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
